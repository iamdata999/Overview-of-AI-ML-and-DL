{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"machine_shape":"hm","authorship_tag":"ABX9TyNKDSHED+/dUtxav2MLZUv6"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"TPU"},"cells":[{"cell_type":"markdown","source":["# DS05 Assignment"],"metadata":{"id":"sJaaGs3ZJiCs"}},{"cell_type":"markdown","source":["**libraries**\n","\n","these libraries and modules are essential tools for various data science tasks, including data manipulation, machine learning, and data visualization. They provide a comprehensive set of functionalities for working with data and building machine learning models."],"metadata":{"id":"xl_-sjINQJqD"}},{"cell_type":"code","source":["#These libraries and modules are essential tools for data analysis,\n","#machine learning, and data visualization,\n","#making them suitable for various data science tasks.\n","#import the necessary libray\n","\n","import pandas as pd\n","import numpy as np\n","import os\n","import matplotlib.pyplot as plt\n","from sklearn.preprocessing import MinMaxScaler\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import LabelEncoder\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.tree import DecisionTreeRegressor\n","from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\n","import seaborn as sns"],"metadata":{"id":"3BCc1au2JtWR"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**Data Loading and Exploration**\n","\n","load or extract a dataset into your Python environment using the libraries you've imported.\n","\n","use the appropriate Pandas function to read it. Let's assume have a CSV file named \"your_dataset.csv\""],"metadata":{"id":"EkJGFpY_RE-G"}},{"cell_type":"code","source":["from google.colab import drive\n","# Mount Google Drive to /content/drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0wiiX3DR0DtZ","executionInfo":{"status":"ok","timestamp":1700591113241,"user_tz":-480,"elapsed":24311,"user":{"displayName":"Md Nizam Sapiee","userId":"06218600148546546203"}},"outputId":"5c989024-5f38-433f-c287-e5b3b3ed8be6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["data_path = '/content/drive/MyDrive/DS05-AS'\n","filename = '2018.csv.zip'\n","# Assuming your file is a compressed CSV file (ZIP)\n","df_flight = csv = pd.read_csv(os.path.join(data_path, filename))"],"metadata":{"id":"pfU0Betr0D2l"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["data_path = '/content/drive/MyDrive/DS05-AS'\n","filename = 'airports.csv'\n","# Assuming your file is a compressed CSV file\n","airport_df = csv = pd.read_csv(os.path.join(data_path, filename))"],"metadata":{"id":"pnmFbLdRKIpH"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**Joint Dataset**\n","\n"," to join the two dataframes flight_df and df_flight based on a common column, let's assume the common column is IATA_CODE.\n","\n","to join df_flight with flight_df based on the 'ORIGIN' column in df_flight and the 'IATA_CODE' column in flight_df. Adjust the column names as needed based on data.\n","\n","The how='left' parameter specifies a left join, meaning that all rows from df_flight will be included in the merged dataframe, and matching rows from flight_df will be added where available. If you want a different type of join, such as inner join (how='inner'), right join (how='right'), or outer join (how='outer'), you can choose accordingly.\n","\n","Make sure to adjust the column names and join conditions based on the structure of  data.\n","\n","\n","\n","\n","User\n","make it outer\n"," to perform an outer join, you can modify the code as follows:\n","\n","python\n","Copy code\n","new_flight_df = pd.merge(df_flight, flight_df, left_on='ORIGIN', right_on='IATA_CODE', how='outer')\n","This will include all rows from both df_flight and flight_df, and fill in missing values with NaN where there are no matches. Adjust the column names based on  actual data structure.\n","\n","Remember that in an outer join, the resulting dataframe will contain all rows from both dataframes, and missing values will be filled with NaN where there is no match."],"metadata":{"id":"e-LjjTBCPr2l"}},{"cell_type":"code","source":["#using the pd.merge() function to perform an outer join between the df_flight and flight_df dataframes\n","#based on the 'ORIGIN' column in df_flight and the 'IATA_CODE' column in flight_df.\n","\n","\n","new_flight_df = pd.merge(df_flight, airport_df, left_on='ORIGIN', right_on='IATA_CODE', how='outer')\n","\n","new_flight_df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":533},"id":"O_fZCih9Le8s","executionInfo":{"status":"ok","timestamp":1700591163296,"user_tz":-480,"elapsed":4312,"user":{"displayName":"Md Nizam Sapiee","userId":"06218600148546546203"}},"outputId":"2d631608-59d9-4ae7-df68-8182102b00fd"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      FL_DATE OP_CARRIER  OP_CARRIER_FL_NUM ORIGIN DEST  CRS_DEP_TIME  \\\n","0  2018-01-01         UA             2429.0    EWR  DEN        1517.0   \n","1  2018-01-01         UA             2415.0    EWR  PDX         825.0   \n","2  2018-01-01         UA             2414.0    EWR  ATL        1044.0   \n","3  2018-01-01         UA             2411.0    EWR  SMF        1810.0   \n","4  2018-01-01         UA             2406.0    EWR  TYS         830.0   \n","\n","   DEP_TIME  DEP_DELAY  TAXI_OUT  WHEELS_OFF  ...  DISTANCE  CARRIER_DELAY  \\\n","0    1512.0       -5.0      15.0      1527.0  ...    1605.0            NaN   \n","1     822.0       -3.0      15.0       837.0  ...    2434.0            NaN   \n","2    1055.0       11.0      11.0      1106.0  ...     746.0            NaN   \n","3    1922.0       72.0      16.0      1938.0  ...    2500.0            7.0   \n","4     844.0       14.0      20.0       904.0  ...     631.0            NaN   \n","\n","   WEATHER_DELAY  NAS_DELAY  SECURITY_DELAY  LATE_AIRCRAFT_DELAY Unnamed: 27  \\\n","0            NaN        NaN             NaN                  NaN         NaN   \n","1            NaN        NaN             NaN                  NaN         NaN   \n","2            NaN        NaN             NaN                  NaN         NaN   \n","3            0.0        0.0             0.0                 18.0         NaN   \n","4            NaN        NaN             NaN                  NaN         NaN   \n","\n","   IATA_CODE                               AIRPORT    CITY  \n","0        EWR  Newark Liberty International Airport  Newark  \n","1        EWR  Newark Liberty International Airport  Newark  \n","2        EWR  Newark Liberty International Airport  Newark  \n","3        EWR  Newark Liberty International Airport  Newark  \n","4        EWR  Newark Liberty International Airport  Newark  \n","\n","[5 rows x 31 columns]"],"text/html":["\n","  <div id=\"df-e01d31c0-37be-418e-a6a7-7b184aed17ef\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>FL_DATE</th>\n","      <th>OP_CARRIER</th>\n","      <th>OP_CARRIER_FL_NUM</th>\n","      <th>ORIGIN</th>\n","      <th>DEST</th>\n","      <th>CRS_DEP_TIME</th>\n","      <th>DEP_TIME</th>\n","      <th>DEP_DELAY</th>\n","      <th>TAXI_OUT</th>\n","      <th>WHEELS_OFF</th>\n","      <th>...</th>\n","      <th>DISTANCE</th>\n","      <th>CARRIER_DELAY</th>\n","      <th>WEATHER_DELAY</th>\n","      <th>NAS_DELAY</th>\n","      <th>SECURITY_DELAY</th>\n","      <th>LATE_AIRCRAFT_DELAY</th>\n","      <th>Unnamed: 27</th>\n","      <th>IATA_CODE</th>\n","      <th>AIRPORT</th>\n","      <th>CITY</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2018-01-01</td>\n","      <td>UA</td>\n","      <td>2429.0</td>\n","      <td>EWR</td>\n","      <td>DEN</td>\n","      <td>1517.0</td>\n","      <td>1512.0</td>\n","      <td>-5.0</td>\n","      <td>15.0</td>\n","      <td>1527.0</td>\n","      <td>...</td>\n","      <td>1605.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>EWR</td>\n","      <td>Newark Liberty International Airport</td>\n","      <td>Newark</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2018-01-01</td>\n","      <td>UA</td>\n","      <td>2415.0</td>\n","      <td>EWR</td>\n","      <td>PDX</td>\n","      <td>825.0</td>\n","      <td>822.0</td>\n","      <td>-3.0</td>\n","      <td>15.0</td>\n","      <td>837.0</td>\n","      <td>...</td>\n","      <td>2434.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>EWR</td>\n","      <td>Newark Liberty International Airport</td>\n","      <td>Newark</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2018-01-01</td>\n","      <td>UA</td>\n","      <td>2414.0</td>\n","      <td>EWR</td>\n","      <td>ATL</td>\n","      <td>1044.0</td>\n","      <td>1055.0</td>\n","      <td>11.0</td>\n","      <td>11.0</td>\n","      <td>1106.0</td>\n","      <td>...</td>\n","      <td>746.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>EWR</td>\n","      <td>Newark Liberty International Airport</td>\n","      <td>Newark</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2018-01-01</td>\n","      <td>UA</td>\n","      <td>2411.0</td>\n","      <td>EWR</td>\n","      <td>SMF</td>\n","      <td>1810.0</td>\n","      <td>1922.0</td>\n","      <td>72.0</td>\n","      <td>16.0</td>\n","      <td>1938.0</td>\n","      <td>...</td>\n","      <td>2500.0</td>\n","      <td>7.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>18.0</td>\n","      <td>NaN</td>\n","      <td>EWR</td>\n","      <td>Newark Liberty International Airport</td>\n","      <td>Newark</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2018-01-01</td>\n","      <td>UA</td>\n","      <td>2406.0</td>\n","      <td>EWR</td>\n","      <td>TYS</td>\n","      <td>830.0</td>\n","      <td>844.0</td>\n","      <td>14.0</td>\n","      <td>20.0</td>\n","      <td>904.0</td>\n","      <td>...</td>\n","      <td>631.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>EWR</td>\n","      <td>Newark Liberty International Airport</td>\n","      <td>Newark</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 31 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e01d31c0-37be-418e-a6a7-7b184aed17ef')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-e01d31c0-37be-418e-a6a7-7b184aed17ef button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-e01d31c0-37be-418e-a6a7-7b184aed17ef');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-1444de12-86fd-4943-9ada-ecbbc98fa12a\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1444de12-86fd-4943-9ada-ecbbc98fa12a')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-1444de12-86fd-4943-9ada-ecbbc98fa12a button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":5}]},{"cell_type":"markdown","source":["merge has been successfully performed, and the resulting dataframe new_flight_df has columns from both df_flight and flight_df. The common column 'ORIGIN' from df_flight and 'IATA_CODE' from flight_df has been used for the outer join."],"metadata":{"id":"PFGIqZFcTpzP"}},{"cell_type":"markdown","source":["# data processing"],"metadata":{"id":"sxAKW26VVgPB"}},{"cell_type":"code","source":["new_flight_df.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"S6FGynJuVyXr","executionInfo":{"status":"ok","timestamp":1700591172271,"user_tz":-480,"elapsed":599,"user":{"displayName":"Md Nizam Sapiee","userId":"06218600148546546203"}},"outputId":"00bfdb5b-049c-4598-b796-40e6df5521e7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","Int64Index: 7213451 entries, 0 to 7213450\n","Data columns (total 31 columns):\n"," #   Column               Dtype  \n","---  ------               -----  \n"," 0   FL_DATE              object \n"," 1   OP_CARRIER           object \n"," 2   OP_CARRIER_FL_NUM    float64\n"," 3   ORIGIN               object \n"," 4   DEST                 object \n"," 5   CRS_DEP_TIME         float64\n"," 6   DEP_TIME             float64\n"," 7   DEP_DELAY            float64\n"," 8   TAXI_OUT             float64\n"," 9   WHEELS_OFF           float64\n"," 10  WHEELS_ON            float64\n"," 11  TAXI_IN              float64\n"," 12  CRS_ARR_TIME         float64\n"," 13  ARR_TIME             float64\n"," 14  ARR_DELAY            float64\n"," 15  CANCELLED            float64\n"," 16  CANCELLATION_CODE    object \n"," 17  DIVERTED             float64\n"," 18  CRS_ELAPSED_TIME     float64\n"," 19  ACTUAL_ELAPSED_TIME  float64\n"," 20  AIR_TIME             float64\n"," 21  DISTANCE             float64\n"," 22  CARRIER_DELAY        float64\n"," 23  WEATHER_DELAY        float64\n"," 24  NAS_DELAY            float64\n"," 25  SECURITY_DELAY       float64\n"," 26  LATE_AIRCRAFT_DELAY  float64\n"," 27  Unnamed: 27          float64\n"," 28  IATA_CODE            object \n"," 29  AIRPORT              object \n"," 30  CITY                 object \n","dtypes: float64(23), object(8)\n","memory usage: 1.7+ GB\n"]}]},{"cell_type":"markdown","source":["The information you provided indicates that your merged dataframe new_flight_df has 7,213,451 entries and 31 columns. Here's a summary of the columns and their data types:\n","\n","Numeric Columns (dtype=float64):\n","\n","OP_CARRIER_FL_NUM\n","CRS_DEP_TIME\n","DEP_TIME\n","DEP_DELAY\n","TAXI_OUT\n","WHEELS_OFF\n","WHEELS_ON\n","TAXI_IN\n","CRS_ARR_TIME\n","ARR_TIME\n","ARR_DELAY\n","CANCELLED\n","DIVERTED\n","CRS_ELAPSED_TIME\n","ACTUAL_ELAPSED_TIME\n","AIR_TIME\n","DISTANCE\n","CARRIER_DELAY\n","WEATHER_DELAY\n","NAS_DELAY\n","SECURITY_DELAY\n","LATE_AIRCRAFT_DELAY\n","Unnamed: 27\n","\n","bject Columns (dtype=object):\n","\n","FL_DATE\n","OP_CARRIER\n","ORIGIN\n","DEST\n","CANCELLATION_CODE\n","IATA_CODE\n","AIRPORT\n","CITY\n","\n","The memory usage is around 1.7+ GB. It's worth noting that if you encounter performance issues or need to optimize memory usage, you may consider converting some columns to more memory-efficient data types (e.g., using pd.to_datetime for date columns or using pd.Categorical for categorical columns).\n","\n","\n","\n","\n","\n","\n","\n","\n","\n"],"metadata":{"id":"TZV62YFyWTXs"}},{"cell_type":"markdown","source":["check for missing data or NaN values in your DataFrame using the isnull() function, followed by sum() to count the number of missing values in each column.\n","\n","This will print the count of missing values for each column in your DataFrame. If a column has no missing values, the count will be 0."],"metadata":{"id":"k4gniCHdXU6j"}},{"cell_type":"code","source":["missing_values = new_flight_df.isnull().sum()\n","print(missing_values)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5X59tuDSW8f5","executionInfo":{"status":"ok","timestamp":1700591189257,"user_tz":-480,"elapsed":7602,"user":{"displayName":"Md Nizam Sapiee","userId":"06218600148546546203"}},"outputId":"fc382c56-41de-463b-dafd-016f95dad1d6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["FL_DATE                      5\n","OP_CARRIER                   5\n","OP_CARRIER_FL_NUM            5\n","ORIGIN                       5\n","DEST                         5\n","CRS_DEP_TIME                 5\n","DEP_TIME                112322\n","DEP_DELAY               117239\n","TAXI_OUT                115835\n","WHEELS_OFF              115834\n","WHEELS_ON               119251\n","TAXI_IN                 119251\n","CRS_ARR_TIME                 5\n","ARR_TIME                119250\n","ARR_DELAY               137045\n","CANCELLED                    5\n","CANCELLATION_CODE      7096867\n","DIVERTED                     5\n","CRS_ELAPSED_TIME            15\n","ACTUAL_ELAPSED_TIME     134447\n","AIR_TIME                134447\n","DISTANCE                     5\n","CARRIER_DELAY          5860741\n","WEATHER_DELAY          5860741\n","NAS_DELAY              5860741\n","SECURITY_DELAY         5860741\n","LATE_AIRCRAFT_DELAY    5860741\n","Unnamed: 27            7213451\n","IATA_CODE                25019\n","AIRPORT                  25019\n","CITY                     30341\n","dtype: int64\n"]}]},{"cell_type":"markdown","source":["Now can decide how to handle the missing values. Options include imputation (filling in missing values with a calculated value), dropping columns or rows with too many missing values, or other strategies depending on the nature of your data and your analysis goals."],"metadata":{"id":"Pgp_iLFNYIgK"}},{"cell_type":"markdown","source":["**Filling missing** values can be done using various strategies, depending on the nature of your data. For numerical columns, you might choose to fill missing values with the mean, median, or a specific constant value.\n","\n","This code fills missing values in numerical columns with the mean and in categorical columns with the mode. Adjust the filling strategy based on the characteristics of data and your analysis goals."],"metadata":{"id":"VrJxT0B0ZFkd"}},{"cell_type":"code","source":["# Filling missing values for numerical columns with the mean\n","numerical_columns = new_flight_df.select_dtypes(include=['float64']).columns\n","new_flight_df[numerical_columns] = new_flight_df[numerical_columns].fillna(new_flight_df[numerical_columns].mean())\n","\n","# Filling missing values for categorical columns with the mode\n","categorical_columns = new_flight_df.select_dtypes(include=['object']).columns\n","new_flight_df[categorical_columns] = new_flight_df[categorical_columns].fillna(new_flight_df[categorical_columns].mode().iloc[0])\n","\n","new_flight_df.head()"],"metadata":{"id":"2lirlYVPZbt_","executionInfo":{"status":"ok","timestamp":1700591229071,"user_tz":-480,"elapsed":32563,"user":{"displayName":"Md Nizam Sapiee","userId":"06218600148546546203"}},"colab":{"base_uri":"https://localhost:8080/","height":533},"outputId":"36394221-8ea8-4a24-fb6c-232d8dc4dd92"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      FL_DATE OP_CARRIER  OP_CARRIER_FL_NUM ORIGIN DEST  CRS_DEP_TIME  \\\n","0  2018-01-01         UA             2429.0    EWR  DEN        1517.0   \n","1  2018-01-01         UA             2415.0    EWR  PDX         825.0   \n","2  2018-01-01         UA             2414.0    EWR  ATL        1044.0   \n","3  2018-01-01         UA             2411.0    EWR  SMF        1810.0   \n","4  2018-01-01         UA             2406.0    EWR  TYS         830.0   \n","\n","   DEP_TIME  DEP_DELAY  TAXI_OUT  WHEELS_OFF  ...  DISTANCE  CARRIER_DELAY  \\\n","0    1512.0       -5.0      15.0      1527.0  ...    1605.0      19.455006   \n","1     822.0       -3.0      15.0       837.0  ...    2434.0      19.455006   \n","2    1055.0       11.0      11.0      1106.0  ...     746.0      19.455006   \n","3    1922.0       72.0      16.0      1938.0  ...    2500.0       7.000000   \n","4     844.0       14.0      20.0       904.0  ...     631.0      19.455006   \n","\n","   WEATHER_DELAY  NAS_DELAY  SECURITY_DELAY  LATE_AIRCRAFT_DELAY Unnamed: 27  \\\n","0       3.636459  15.885471        0.093539             25.64412         NaN   \n","1       3.636459  15.885471        0.093539             25.64412         NaN   \n","2       3.636459  15.885471        0.093539             25.64412         NaN   \n","3       0.000000   0.000000        0.000000             18.00000         NaN   \n","4       3.636459  15.885471        0.093539             25.64412         NaN   \n","\n","   IATA_CODE                               AIRPORT    CITY  \n","0        EWR  Newark Liberty International Airport  Newark  \n","1        EWR  Newark Liberty International Airport  Newark  \n","2        EWR  Newark Liberty International Airport  Newark  \n","3        EWR  Newark Liberty International Airport  Newark  \n","4        EWR  Newark Liberty International Airport  Newark  \n","\n","[5 rows x 31 columns]"],"text/html":["\n","  <div id=\"df-b1e2f35a-22ab-44e2-9e6f-6a449318921e\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>FL_DATE</th>\n","      <th>OP_CARRIER</th>\n","      <th>OP_CARRIER_FL_NUM</th>\n","      <th>ORIGIN</th>\n","      <th>DEST</th>\n","      <th>CRS_DEP_TIME</th>\n","      <th>DEP_TIME</th>\n","      <th>DEP_DELAY</th>\n","      <th>TAXI_OUT</th>\n","      <th>WHEELS_OFF</th>\n","      <th>...</th>\n","      <th>DISTANCE</th>\n","      <th>CARRIER_DELAY</th>\n","      <th>WEATHER_DELAY</th>\n","      <th>NAS_DELAY</th>\n","      <th>SECURITY_DELAY</th>\n","      <th>LATE_AIRCRAFT_DELAY</th>\n","      <th>Unnamed: 27</th>\n","      <th>IATA_CODE</th>\n","      <th>AIRPORT</th>\n","      <th>CITY</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2018-01-01</td>\n","      <td>UA</td>\n","      <td>2429.0</td>\n","      <td>EWR</td>\n","      <td>DEN</td>\n","      <td>1517.0</td>\n","      <td>1512.0</td>\n","      <td>-5.0</td>\n","      <td>15.0</td>\n","      <td>1527.0</td>\n","      <td>...</td>\n","      <td>1605.0</td>\n","      <td>19.455006</td>\n","      <td>3.636459</td>\n","      <td>15.885471</td>\n","      <td>0.093539</td>\n","      <td>25.64412</td>\n","      <td>NaN</td>\n","      <td>EWR</td>\n","      <td>Newark Liberty International Airport</td>\n","      <td>Newark</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2018-01-01</td>\n","      <td>UA</td>\n","      <td>2415.0</td>\n","      <td>EWR</td>\n","      <td>PDX</td>\n","      <td>825.0</td>\n","      <td>822.0</td>\n","      <td>-3.0</td>\n","      <td>15.0</td>\n","      <td>837.0</td>\n","      <td>...</td>\n","      <td>2434.0</td>\n","      <td>19.455006</td>\n","      <td>3.636459</td>\n","      <td>15.885471</td>\n","      <td>0.093539</td>\n","      <td>25.64412</td>\n","      <td>NaN</td>\n","      <td>EWR</td>\n","      <td>Newark Liberty International Airport</td>\n","      <td>Newark</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2018-01-01</td>\n","      <td>UA</td>\n","      <td>2414.0</td>\n","      <td>EWR</td>\n","      <td>ATL</td>\n","      <td>1044.0</td>\n","      <td>1055.0</td>\n","      <td>11.0</td>\n","      <td>11.0</td>\n","      <td>1106.0</td>\n","      <td>...</td>\n","      <td>746.0</td>\n","      <td>19.455006</td>\n","      <td>3.636459</td>\n","      <td>15.885471</td>\n","      <td>0.093539</td>\n","      <td>25.64412</td>\n","      <td>NaN</td>\n","      <td>EWR</td>\n","      <td>Newark Liberty International Airport</td>\n","      <td>Newark</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2018-01-01</td>\n","      <td>UA</td>\n","      <td>2411.0</td>\n","      <td>EWR</td>\n","      <td>SMF</td>\n","      <td>1810.0</td>\n","      <td>1922.0</td>\n","      <td>72.0</td>\n","      <td>16.0</td>\n","      <td>1938.0</td>\n","      <td>...</td>\n","      <td>2500.0</td>\n","      <td>7.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>18.00000</td>\n","      <td>NaN</td>\n","      <td>EWR</td>\n","      <td>Newark Liberty International Airport</td>\n","      <td>Newark</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2018-01-01</td>\n","      <td>UA</td>\n","      <td>2406.0</td>\n","      <td>EWR</td>\n","      <td>TYS</td>\n","      <td>830.0</td>\n","      <td>844.0</td>\n","      <td>14.0</td>\n","      <td>20.0</td>\n","      <td>904.0</td>\n","      <td>...</td>\n","      <td>631.0</td>\n","      <td>19.455006</td>\n","      <td>3.636459</td>\n","      <td>15.885471</td>\n","      <td>0.093539</td>\n","      <td>25.64412</td>\n","      <td>NaN</td>\n","      <td>EWR</td>\n","      <td>Newark Liberty International Airport</td>\n","      <td>Newark</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 31 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b1e2f35a-22ab-44e2-9e6f-6a449318921e')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-b1e2f35a-22ab-44e2-9e6f-6a449318921e button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-b1e2f35a-22ab-44e2-9e6f-6a449318921e');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-bea90f03-e737-4e1a-acf8-32bb28faa25a\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-bea90f03-e737-4e1a-acf8-32bb28faa25a')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-bea90f03-e737-4e1a-acf8-32bb28faa25a button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":8}]},{"cell_type":"markdown","source":["It seems that the column 'Unnamed: 27' still contains NaN values. to address this specifically, choose to drop this column or fill its missing values with a particular value.\n","\n","Replace 0 with the desired value you want to use."],"metadata":{"id":"i_y1MCPCah85"}},{"cell_type":"code","source":["# Replace NaN values in 'Unnamed: 27' with a specific value, for example, 0\n","new_flight_df['Unnamed: 27'] = new_flight_df['Unnamed: 27'].fillna(0)\n","\n","new_flight_df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":533},"id":"72Nig-RYa2xE","executionInfo":{"status":"ok","timestamp":1700591270324,"user_tz":-480,"elapsed":723,"user":{"displayName":"Md Nizam Sapiee","userId":"06218600148546546203"}},"outputId":"7025ed86-41d3-4a78-a694-b007e359dcc1"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      FL_DATE OP_CARRIER  OP_CARRIER_FL_NUM ORIGIN DEST  CRS_DEP_TIME  \\\n","0  2018-01-01         UA             2429.0    EWR  DEN        1517.0   \n","1  2018-01-01         UA             2415.0    EWR  PDX         825.0   \n","2  2018-01-01         UA             2414.0    EWR  ATL        1044.0   \n","3  2018-01-01         UA             2411.0    EWR  SMF        1810.0   \n","4  2018-01-01         UA             2406.0    EWR  TYS         830.0   \n","\n","   DEP_TIME  DEP_DELAY  TAXI_OUT  WHEELS_OFF  ...  DISTANCE  CARRIER_DELAY  \\\n","0    1512.0       -5.0      15.0      1527.0  ...    1605.0      19.455006   \n","1     822.0       -3.0      15.0       837.0  ...    2434.0      19.455006   \n","2    1055.0       11.0      11.0      1106.0  ...     746.0      19.455006   \n","3    1922.0       72.0      16.0      1938.0  ...    2500.0       7.000000   \n","4     844.0       14.0      20.0       904.0  ...     631.0      19.455006   \n","\n","   WEATHER_DELAY  NAS_DELAY  SECURITY_DELAY  LATE_AIRCRAFT_DELAY Unnamed: 27  \\\n","0       3.636459  15.885471        0.093539             25.64412         0.0   \n","1       3.636459  15.885471        0.093539             25.64412         0.0   \n","2       3.636459  15.885471        0.093539             25.64412         0.0   \n","3       0.000000   0.000000        0.000000             18.00000         0.0   \n","4       3.636459  15.885471        0.093539             25.64412         0.0   \n","\n","   IATA_CODE                               AIRPORT    CITY  \n","0        EWR  Newark Liberty International Airport  Newark  \n","1        EWR  Newark Liberty International Airport  Newark  \n","2        EWR  Newark Liberty International Airport  Newark  \n","3        EWR  Newark Liberty International Airport  Newark  \n","4        EWR  Newark Liberty International Airport  Newark  \n","\n","[5 rows x 31 columns]"],"text/html":["\n","  <div id=\"df-24a663c2-e801-4d48-b64d-f0f49e955983\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>FL_DATE</th>\n","      <th>OP_CARRIER</th>\n","      <th>OP_CARRIER_FL_NUM</th>\n","      <th>ORIGIN</th>\n","      <th>DEST</th>\n","      <th>CRS_DEP_TIME</th>\n","      <th>DEP_TIME</th>\n","      <th>DEP_DELAY</th>\n","      <th>TAXI_OUT</th>\n","      <th>WHEELS_OFF</th>\n","      <th>...</th>\n","      <th>DISTANCE</th>\n","      <th>CARRIER_DELAY</th>\n","      <th>WEATHER_DELAY</th>\n","      <th>NAS_DELAY</th>\n","      <th>SECURITY_DELAY</th>\n","      <th>LATE_AIRCRAFT_DELAY</th>\n","      <th>Unnamed: 27</th>\n","      <th>IATA_CODE</th>\n","      <th>AIRPORT</th>\n","      <th>CITY</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2018-01-01</td>\n","      <td>UA</td>\n","      <td>2429.0</td>\n","      <td>EWR</td>\n","      <td>DEN</td>\n","      <td>1517.0</td>\n","      <td>1512.0</td>\n","      <td>-5.0</td>\n","      <td>15.0</td>\n","      <td>1527.0</td>\n","      <td>...</td>\n","      <td>1605.0</td>\n","      <td>19.455006</td>\n","      <td>3.636459</td>\n","      <td>15.885471</td>\n","      <td>0.093539</td>\n","      <td>25.64412</td>\n","      <td>0.0</td>\n","      <td>EWR</td>\n","      <td>Newark Liberty International Airport</td>\n","      <td>Newark</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2018-01-01</td>\n","      <td>UA</td>\n","      <td>2415.0</td>\n","      <td>EWR</td>\n","      <td>PDX</td>\n","      <td>825.0</td>\n","      <td>822.0</td>\n","      <td>-3.0</td>\n","      <td>15.0</td>\n","      <td>837.0</td>\n","      <td>...</td>\n","      <td>2434.0</td>\n","      <td>19.455006</td>\n","      <td>3.636459</td>\n","      <td>15.885471</td>\n","      <td>0.093539</td>\n","      <td>25.64412</td>\n","      <td>0.0</td>\n","      <td>EWR</td>\n","      <td>Newark Liberty International Airport</td>\n","      <td>Newark</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2018-01-01</td>\n","      <td>UA</td>\n","      <td>2414.0</td>\n","      <td>EWR</td>\n","      <td>ATL</td>\n","      <td>1044.0</td>\n","      <td>1055.0</td>\n","      <td>11.0</td>\n","      <td>11.0</td>\n","      <td>1106.0</td>\n","      <td>...</td>\n","      <td>746.0</td>\n","      <td>19.455006</td>\n","      <td>3.636459</td>\n","      <td>15.885471</td>\n","      <td>0.093539</td>\n","      <td>25.64412</td>\n","      <td>0.0</td>\n","      <td>EWR</td>\n","      <td>Newark Liberty International Airport</td>\n","      <td>Newark</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2018-01-01</td>\n","      <td>UA</td>\n","      <td>2411.0</td>\n","      <td>EWR</td>\n","      <td>SMF</td>\n","      <td>1810.0</td>\n","      <td>1922.0</td>\n","      <td>72.0</td>\n","      <td>16.0</td>\n","      <td>1938.0</td>\n","      <td>...</td>\n","      <td>2500.0</td>\n","      <td>7.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>18.00000</td>\n","      <td>0.0</td>\n","      <td>EWR</td>\n","      <td>Newark Liberty International Airport</td>\n","      <td>Newark</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2018-01-01</td>\n","      <td>UA</td>\n","      <td>2406.0</td>\n","      <td>EWR</td>\n","      <td>TYS</td>\n","      <td>830.0</td>\n","      <td>844.0</td>\n","      <td>14.0</td>\n","      <td>20.0</td>\n","      <td>904.0</td>\n","      <td>...</td>\n","      <td>631.0</td>\n","      <td>19.455006</td>\n","      <td>3.636459</td>\n","      <td>15.885471</td>\n","      <td>0.093539</td>\n","      <td>25.64412</td>\n","      <td>0.0</td>\n","      <td>EWR</td>\n","      <td>Newark Liberty International Airport</td>\n","      <td>Newark</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 31 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-24a663c2-e801-4d48-b64d-f0f49e955983')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-24a663c2-e801-4d48-b64d-f0f49e955983 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-24a663c2-e801-4d48-b64d-f0f49e955983');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-429ae935-02c5-43ad-8b34-a0f9f56898ed\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-429ae935-02c5-43ad-8b34-a0f9f56898ed')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-429ae935-02c5-43ad-8b34-a0f9f56898ed button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":9}]},{"cell_type":"markdown","source":["converted are successful for 'Unnamed: 27' to 0"],"metadata":{"id":"x347B51mbEsi"}},{"cell_type":"markdown","source":["in the previous info() show that FL_DATE Dtyoe are object ** now it need to changes the **FL_DATE Dtyoevb to datetime\n","\n","This code will convert the 'FL_DATE' column in new_flight_df to a datetime format with the specified format '%Y-%m-%d'. The info() method will then display the updated information about the DataFrame, including the data types of each column."],"metadata":{"id":"f9OAmCGsqGmm"}},{"cell_type":"code","source":["new_flight_df['FL_DATE'] = pd.to_datetime(new_flight_df['FL_DATE'], format='%Y-%m-%d')\n","\n","new_flight_df.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FctfDh5HqH3W","executionInfo":{"status":"ok","timestamp":1700591275147,"user_tz":-480,"elapsed":1025,"user":{"displayName":"Md Nizam Sapiee","userId":"06218600148546546203"}},"outputId":"fee498a7-5866-4bb7-a1fa-f1086efd2de2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","Int64Index: 7213451 entries, 0 to 7213450\n","Data columns (total 31 columns):\n"," #   Column               Dtype         \n","---  ------               -----         \n"," 0   FL_DATE              datetime64[ns]\n"," 1   OP_CARRIER           object        \n"," 2   OP_CARRIER_FL_NUM    float64       \n"," 3   ORIGIN               object        \n"," 4   DEST                 object        \n"," 5   CRS_DEP_TIME         float64       \n"," 6   DEP_TIME             float64       \n"," 7   DEP_DELAY            float64       \n"," 8   TAXI_OUT             float64       \n"," 9   WHEELS_OFF           float64       \n"," 10  WHEELS_ON            float64       \n"," 11  TAXI_IN              float64       \n"," 12  CRS_ARR_TIME         float64       \n"," 13  ARR_TIME             float64       \n"," 14  ARR_DELAY            float64       \n"," 15  CANCELLED            float64       \n"," 16  CANCELLATION_CODE    object        \n"," 17  DIVERTED             float64       \n"," 18  CRS_ELAPSED_TIME     float64       \n"," 19  ACTUAL_ELAPSED_TIME  float64       \n"," 20  AIR_TIME             float64       \n"," 21  DISTANCE             float64       \n"," 22  CARRIER_DELAY        float64       \n"," 23  WEATHER_DELAY        float64       \n"," 24  NAS_DELAY            float64       \n"," 25  SECURITY_DELAY       float64       \n"," 26  LATE_AIRCRAFT_DELAY  float64       \n"," 27  Unnamed: 27          float64       \n"," 28  IATA_CODE            object        \n"," 29  AIRPORT              object        \n"," 30  CITY                 object        \n","dtypes: datetime64[ns](1), float64(23), object(7)\n","memory usage: 1.7+ GB\n"]}]},{"cell_type":"markdown","source":["successfully converted the 'FL_DATE' column to the datetime64[ns] format in your DataFrame new_flight_df. Now, the 'FL_DATE' column is of datetime type, which will make it easier to work with date-related operations."],"metadata":{"id":"pz3fdJCSqRne"}},{"cell_type":"markdown","source":["# Data Transformation\n","Data transformation is also the middle step of the ETL (extract, transform, load) process, which is performed by data warehouse software. Typically, data engineers, data scientists, and data analysts use domain-specific languages such as SQL or scripting languages such as Python to transform data."],"metadata":{"id":"tj1oLenM1p_X"}},{"cell_type":"markdown","source":["**Now rename** method to rename the columns in your DataFrame.\n","\n","This code will rename the specified columns in your DataFrame. Adjust the names as needed. If you print the column names using new_flight_df.columns,"],"metadata":{"id":"8rU11n15kWw1"}},{"cell_type":"code","source":["new_flight_df = new_flight_df.rename(columns={\n","    'FL DATE': 'FLY DATE',\n","    'OPS CARRIER': 'OPS CARRIER',\n","    'OP CARRIER FLY NO': 'OP CARRIER FLY NO',\n","    'CRS DEP TIME': 'CRS DEP TIME',\n","    'DEP TIME': 'DEP TIME',\n","    'DEP DELAY': 'DEP DELAY',\n","    'TAXI OUT': 'TAXI OUT',\n","    'WHEELS OFF': 'WHEELS OFF',\n","    'ARR TIME': 'ARR TIME',\n","    'ARR DELAY': 'ARR DELAY',\n","    'CARRIER DELAY': 'CARRIER DELAY',\n","    'WEATHER DELAY': 'WEATHER DELAY',\n","    'NAS DELAY': 'NAS DELAY',\n","    'SECURITY DELAY': 'SECURITY DELAY',\n","    'LATE AIRCRAFT DELAY': 'LATE AIRCRAFT DELAY',\n","    'IATA CODE': 'IATA CODE'\n","})\n","\n","# Replace underscores with spaces in specified column names\n","new_flight_df.columns = new_flight_df.columns.str.replace('_', ' ')\n","\n","\n","new_flight_df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":550},"id":"0YrkDJqikX_M","executionInfo":{"status":"ok","timestamp":1700591290629,"user_tz":-480,"elapsed":3391,"user":{"displayName":"Md Nizam Sapiee","userId":"06218600148546546203"}},"outputId":"8113920e-c34a-413a-f45a-08f8b56cdcb0"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     FL DATE OP CARRIER  OP CARRIER FL NUM ORIGIN DEST  CRS DEP TIME  \\\n","0 2018-01-01         UA             2429.0    EWR  DEN        1517.0   \n","1 2018-01-01         UA             2415.0    EWR  PDX         825.0   \n","2 2018-01-01         UA             2414.0    EWR  ATL        1044.0   \n","3 2018-01-01         UA             2411.0    EWR  SMF        1810.0   \n","4 2018-01-01         UA             2406.0    EWR  TYS         830.0   \n","\n","   DEP TIME  DEP DELAY  TAXI OUT  WHEELS OFF  ...  DISTANCE  CARRIER DELAY  \\\n","0    1512.0       -5.0      15.0      1527.0  ...    1605.0      19.455006   \n","1     822.0       -3.0      15.0       837.0  ...    2434.0      19.455006   \n","2    1055.0       11.0      11.0      1106.0  ...     746.0      19.455006   \n","3    1922.0       72.0      16.0      1938.0  ...    2500.0       7.000000   \n","4     844.0       14.0      20.0       904.0  ...     631.0      19.455006   \n","\n","   WEATHER DELAY  NAS DELAY  SECURITY DELAY  LATE AIRCRAFT DELAY Unnamed: 27  \\\n","0       3.636459  15.885471        0.093539             25.64412         0.0   \n","1       3.636459  15.885471        0.093539             25.64412         0.0   \n","2       3.636459  15.885471        0.093539             25.64412         0.0   \n","3       0.000000   0.000000        0.000000             18.00000         0.0   \n","4       3.636459  15.885471        0.093539             25.64412         0.0   \n","\n","   IATA CODE                               AIRPORT    CITY  \n","0        EWR  Newark Liberty International Airport  Newark  \n","1        EWR  Newark Liberty International Airport  Newark  \n","2        EWR  Newark Liberty International Airport  Newark  \n","3        EWR  Newark Liberty International Airport  Newark  \n","4        EWR  Newark Liberty International Airport  Newark  \n","\n","[5 rows x 31 columns]"],"text/html":["\n","  <div id=\"df-79ef591f-4fc5-4a1d-91c7-9ccda5354391\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>FL DATE</th>\n","      <th>OP CARRIER</th>\n","      <th>OP CARRIER FL NUM</th>\n","      <th>ORIGIN</th>\n","      <th>DEST</th>\n","      <th>CRS DEP TIME</th>\n","      <th>DEP TIME</th>\n","      <th>DEP DELAY</th>\n","      <th>TAXI OUT</th>\n","      <th>WHEELS OFF</th>\n","      <th>...</th>\n","      <th>DISTANCE</th>\n","      <th>CARRIER DELAY</th>\n","      <th>WEATHER DELAY</th>\n","      <th>NAS DELAY</th>\n","      <th>SECURITY DELAY</th>\n","      <th>LATE AIRCRAFT DELAY</th>\n","      <th>Unnamed: 27</th>\n","      <th>IATA CODE</th>\n","      <th>AIRPORT</th>\n","      <th>CITY</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2018-01-01</td>\n","      <td>UA</td>\n","      <td>2429.0</td>\n","      <td>EWR</td>\n","      <td>DEN</td>\n","      <td>1517.0</td>\n","      <td>1512.0</td>\n","      <td>-5.0</td>\n","      <td>15.0</td>\n","      <td>1527.0</td>\n","      <td>...</td>\n","      <td>1605.0</td>\n","      <td>19.455006</td>\n","      <td>3.636459</td>\n","      <td>15.885471</td>\n","      <td>0.093539</td>\n","      <td>25.64412</td>\n","      <td>0.0</td>\n","      <td>EWR</td>\n","      <td>Newark Liberty International Airport</td>\n","      <td>Newark</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2018-01-01</td>\n","      <td>UA</td>\n","      <td>2415.0</td>\n","      <td>EWR</td>\n","      <td>PDX</td>\n","      <td>825.0</td>\n","      <td>822.0</td>\n","      <td>-3.0</td>\n","      <td>15.0</td>\n","      <td>837.0</td>\n","      <td>...</td>\n","      <td>2434.0</td>\n","      <td>19.455006</td>\n","      <td>3.636459</td>\n","      <td>15.885471</td>\n","      <td>0.093539</td>\n","      <td>25.64412</td>\n","      <td>0.0</td>\n","      <td>EWR</td>\n","      <td>Newark Liberty International Airport</td>\n","      <td>Newark</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2018-01-01</td>\n","      <td>UA</td>\n","      <td>2414.0</td>\n","      <td>EWR</td>\n","      <td>ATL</td>\n","      <td>1044.0</td>\n","      <td>1055.0</td>\n","      <td>11.0</td>\n","      <td>11.0</td>\n","      <td>1106.0</td>\n","      <td>...</td>\n","      <td>746.0</td>\n","      <td>19.455006</td>\n","      <td>3.636459</td>\n","      <td>15.885471</td>\n","      <td>0.093539</td>\n","      <td>25.64412</td>\n","      <td>0.0</td>\n","      <td>EWR</td>\n","      <td>Newark Liberty International Airport</td>\n","      <td>Newark</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2018-01-01</td>\n","      <td>UA</td>\n","      <td>2411.0</td>\n","      <td>EWR</td>\n","      <td>SMF</td>\n","      <td>1810.0</td>\n","      <td>1922.0</td>\n","      <td>72.0</td>\n","      <td>16.0</td>\n","      <td>1938.0</td>\n","      <td>...</td>\n","      <td>2500.0</td>\n","      <td>7.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>18.00000</td>\n","      <td>0.0</td>\n","      <td>EWR</td>\n","      <td>Newark Liberty International Airport</td>\n","      <td>Newark</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2018-01-01</td>\n","      <td>UA</td>\n","      <td>2406.0</td>\n","      <td>EWR</td>\n","      <td>TYS</td>\n","      <td>830.0</td>\n","      <td>844.0</td>\n","      <td>14.0</td>\n","      <td>20.0</td>\n","      <td>904.0</td>\n","      <td>...</td>\n","      <td>631.0</td>\n","      <td>19.455006</td>\n","      <td>3.636459</td>\n","      <td>15.885471</td>\n","      <td>0.093539</td>\n","      <td>25.64412</td>\n","      <td>0.0</td>\n","      <td>EWR</td>\n","      <td>Newark Liberty International Airport</td>\n","      <td>Newark</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 31 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-79ef591f-4fc5-4a1d-91c7-9ccda5354391')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-79ef591f-4fc5-4a1d-91c7-9ccda5354391 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-79ef591f-4fc5-4a1d-91c7-9ccda5354391');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-e840a92d-2e1e-41d9-99c2-9f9b9b97816e\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e840a92d-2e1e-41d9-99c2-9f9b9b97816e')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-e840a92d-2e1e-41d9-99c2-9f9b9b97816e button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":11}]},{"cell_type":"markdown","source":["renaming process was successful, and the new column names sound better.\n","\n","\n","\n","create a new column 'Flight_status' in your DataFrame based on the condition you've described. This code adds a new column 'Flight_status' to your DataFrame, and for each row, it checks if the value in the 'ARR DELAY' column is less than 15. If it is, it assigns 0 (on time); otherwise, it assigns 1 (delayed)."],"metadata":{"id":"vvGuh5iHlAlE"}},{"cell_type":"code","source":["# Create a new column 'Flight_status' based on 'ARR DELAY'\n","new_flight_df['Flight_status'] = new_flight_df['ARR DELAY'].apply(lambda x: 0 if x < 15 else 1)\n","new_flight_df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":550},"id":"5rCrmgqXux2L","executionInfo":{"status":"ok","timestamp":1700591326063,"user_tz":-480,"elapsed":2870,"user":{"displayName":"Md Nizam Sapiee","userId":"06218600148546546203"}},"outputId":"17d11222-a73d-4e59-bacc-0332073fdc9b"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     FL DATE OP CARRIER  OP CARRIER FL NUM ORIGIN DEST  CRS DEP TIME  \\\n","0 2018-01-01         UA             2429.0    EWR  DEN        1517.0   \n","1 2018-01-01         UA             2415.0    EWR  PDX         825.0   \n","2 2018-01-01         UA             2414.0    EWR  ATL        1044.0   \n","3 2018-01-01         UA             2411.0    EWR  SMF        1810.0   \n","4 2018-01-01         UA             2406.0    EWR  TYS         830.0   \n","\n","   DEP TIME  DEP DELAY  TAXI OUT  WHEELS OFF  ...  CARRIER DELAY  \\\n","0    1512.0       -5.0      15.0      1527.0  ...      19.455006   \n","1     822.0       -3.0      15.0       837.0  ...      19.455006   \n","2    1055.0       11.0      11.0      1106.0  ...      19.455006   \n","3    1922.0       72.0      16.0      1938.0  ...       7.000000   \n","4     844.0       14.0      20.0       904.0  ...      19.455006   \n","\n","   WEATHER DELAY  NAS DELAY  SECURITY DELAY  LATE AIRCRAFT DELAY  Unnamed: 27  \\\n","0       3.636459  15.885471        0.093539             25.64412          0.0   \n","1       3.636459  15.885471        0.093539             25.64412          0.0   \n","2       3.636459  15.885471        0.093539             25.64412          0.0   \n","3       0.000000   0.000000        0.000000             18.00000          0.0   \n","4       3.636459  15.885471        0.093539             25.64412          0.0   \n","\n","  IATA CODE                               AIRPORT    CITY  Flight_status  \n","0       EWR  Newark Liberty International Airport  Newark              0  \n","1       EWR  Newark Liberty International Airport  Newark              0  \n","2       EWR  Newark Liberty International Airport  Newark              0  \n","3       EWR  Newark Liberty International Airport  Newark              1  \n","4       EWR  Newark Liberty International Airport  Newark              0  \n","\n","[5 rows x 32 columns]"],"text/html":["\n","  <div id=\"df-a965cc7c-40dd-48ec-922d-65fe51b2d525\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>FL DATE</th>\n","      <th>OP CARRIER</th>\n","      <th>OP CARRIER FL NUM</th>\n","      <th>ORIGIN</th>\n","      <th>DEST</th>\n","      <th>CRS DEP TIME</th>\n","      <th>DEP TIME</th>\n","      <th>DEP DELAY</th>\n","      <th>TAXI OUT</th>\n","      <th>WHEELS OFF</th>\n","      <th>...</th>\n","      <th>CARRIER DELAY</th>\n","      <th>WEATHER DELAY</th>\n","      <th>NAS DELAY</th>\n","      <th>SECURITY DELAY</th>\n","      <th>LATE AIRCRAFT DELAY</th>\n","      <th>Unnamed: 27</th>\n","      <th>IATA CODE</th>\n","      <th>AIRPORT</th>\n","      <th>CITY</th>\n","      <th>Flight_status</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2018-01-01</td>\n","      <td>UA</td>\n","      <td>2429.0</td>\n","      <td>EWR</td>\n","      <td>DEN</td>\n","      <td>1517.0</td>\n","      <td>1512.0</td>\n","      <td>-5.0</td>\n","      <td>15.0</td>\n","      <td>1527.0</td>\n","      <td>...</td>\n","      <td>19.455006</td>\n","      <td>3.636459</td>\n","      <td>15.885471</td>\n","      <td>0.093539</td>\n","      <td>25.64412</td>\n","      <td>0.0</td>\n","      <td>EWR</td>\n","      <td>Newark Liberty International Airport</td>\n","      <td>Newark</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2018-01-01</td>\n","      <td>UA</td>\n","      <td>2415.0</td>\n","      <td>EWR</td>\n","      <td>PDX</td>\n","      <td>825.0</td>\n","      <td>822.0</td>\n","      <td>-3.0</td>\n","      <td>15.0</td>\n","      <td>837.0</td>\n","      <td>...</td>\n","      <td>19.455006</td>\n","      <td>3.636459</td>\n","      <td>15.885471</td>\n","      <td>0.093539</td>\n","      <td>25.64412</td>\n","      <td>0.0</td>\n","      <td>EWR</td>\n","      <td>Newark Liberty International Airport</td>\n","      <td>Newark</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2018-01-01</td>\n","      <td>UA</td>\n","      <td>2414.0</td>\n","      <td>EWR</td>\n","      <td>ATL</td>\n","      <td>1044.0</td>\n","      <td>1055.0</td>\n","      <td>11.0</td>\n","      <td>11.0</td>\n","      <td>1106.0</td>\n","      <td>...</td>\n","      <td>19.455006</td>\n","      <td>3.636459</td>\n","      <td>15.885471</td>\n","      <td>0.093539</td>\n","      <td>25.64412</td>\n","      <td>0.0</td>\n","      <td>EWR</td>\n","      <td>Newark Liberty International Airport</td>\n","      <td>Newark</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2018-01-01</td>\n","      <td>UA</td>\n","      <td>2411.0</td>\n","      <td>EWR</td>\n","      <td>SMF</td>\n","      <td>1810.0</td>\n","      <td>1922.0</td>\n","      <td>72.0</td>\n","      <td>16.0</td>\n","      <td>1938.0</td>\n","      <td>...</td>\n","      <td>7.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>18.00000</td>\n","      <td>0.0</td>\n","      <td>EWR</td>\n","      <td>Newark Liberty International Airport</td>\n","      <td>Newark</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2018-01-01</td>\n","      <td>UA</td>\n","      <td>2406.0</td>\n","      <td>EWR</td>\n","      <td>TYS</td>\n","      <td>830.0</td>\n","      <td>844.0</td>\n","      <td>14.0</td>\n","      <td>20.0</td>\n","      <td>904.0</td>\n","      <td>...</td>\n","      <td>19.455006</td>\n","      <td>3.636459</td>\n","      <td>15.885471</td>\n","      <td>0.093539</td>\n","      <td>25.64412</td>\n","      <td>0.0</td>\n","      <td>EWR</td>\n","      <td>Newark Liberty International Airport</td>\n","      <td>Newark</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 32 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a965cc7c-40dd-48ec-922d-65fe51b2d525')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-a965cc7c-40dd-48ec-922d-65fe51b2d525 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-a965cc7c-40dd-48ec-922d-65fe51b2d525');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-f5a65ffc-8a8b-4efc-9942-bd7f3e13cc81\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f5a65ffc-8a8b-4efc-9942-bd7f3e13cc81')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-f5a65ffc-8a8b-4efc-9942-bd7f3e13cc81 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":12}]},{"cell_type":"markdown","source":["use set_index('IATA_CODE')['AIRPORT'].to_dict() to create a dictionary (airport_dict) mapping IATA codes to airport names. I then use replace to replace the 'ORIGIN' and 'DEST' codes with their corresponding airport names based on the dictionary. This should achieve the goal of replacing the codes with the actual airport names."],"metadata":{"id":"iL7dmbhamVpj"}},{"cell_type":"code","source":["# Create a dictionary mapping IATA codes to airport names\n","airport_dict = new_flight_df.set_index('IATA CODE')['AIRPORT'].to_dict()\n","\n","# Replace 'ORIGIN' and 'DEST' codes with airport names\n","new_flight_df['ORIGIN'] = new_flight_df['ORIGIN'].replace(airport_dict)\n","new_flight_df['DEST'] = new_flight_df['DEST'].replace(airport_dict)\n","new_flight_df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":568},"id":"yN-tm0pVmXm4","executionInfo":{"status":"ok","timestamp":1700591541622,"user_tz":-480,"elapsed":207152,"user":{"displayName":"Md Nizam Sapiee","userId":"06218600148546546203"}},"outputId":"9d7ab905-cd02-43b2-c449-b6fe21cf4df8"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     FL DATE OP CARRIER  OP CARRIER FL NUM  \\\n","0 2018-01-01         UA             2429.0   \n","1 2018-01-01         UA             2415.0   \n","2 2018-01-01         UA             2414.0   \n","3 2018-01-01         UA             2411.0   \n","4 2018-01-01         UA             2406.0   \n","\n","                                 ORIGIN  \\\n","0  Newark Liberty International Airport   \n","1  Newark Liberty International Airport   \n","2  Newark Liberty International Airport   \n","3  Newark Liberty International Airport   \n","4  Newark Liberty International Airport   \n","\n","                                               DEST  CRS DEP TIME  DEP TIME  \\\n","0                      Denver International Airport        1517.0    1512.0   \n","1                    Portland International Airport         825.0     822.0   \n","2  Hartsfield-Jackson Atlanta International Airport        1044.0    1055.0   \n","3                  Sacramento International Airport        1810.0    1922.0   \n","4                              McGhee Tyson Airport         830.0     844.0   \n","\n","   DEP DELAY  TAXI OUT  WHEELS OFF  ...  CARRIER DELAY  WEATHER DELAY  \\\n","0       -5.0      15.0      1527.0  ...      19.455006       3.636459   \n","1       -3.0      15.0       837.0  ...      19.455006       3.636459   \n","2       11.0      11.0      1106.0  ...      19.455006       3.636459   \n","3       72.0      16.0      1938.0  ...       7.000000       0.000000   \n","4       14.0      20.0       904.0  ...      19.455006       3.636459   \n","\n","   NAS DELAY  SECURITY DELAY  LATE AIRCRAFT DELAY  Unnamed: 27 IATA CODE  \\\n","0  15.885471        0.093539             25.64412          0.0       EWR   \n","1  15.885471        0.093539             25.64412          0.0       EWR   \n","2  15.885471        0.093539             25.64412          0.0       EWR   \n","3   0.000000        0.000000             18.00000          0.0       EWR   \n","4  15.885471        0.093539             25.64412          0.0       EWR   \n","\n","                                AIRPORT    CITY  Flight_status  \n","0  Newark Liberty International Airport  Newark              0  \n","1  Newark Liberty International Airport  Newark              0  \n","2  Newark Liberty International Airport  Newark              0  \n","3  Newark Liberty International Airport  Newark              1  \n","4  Newark Liberty International Airport  Newark              0  \n","\n","[5 rows x 32 columns]"],"text/html":["\n","  <div id=\"df-5f36c01e-169c-45ae-a62f-b639de7266bf\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>FL DATE</th>\n","      <th>OP CARRIER</th>\n","      <th>OP CARRIER FL NUM</th>\n","      <th>ORIGIN</th>\n","      <th>DEST</th>\n","      <th>CRS DEP TIME</th>\n","      <th>DEP TIME</th>\n","      <th>DEP DELAY</th>\n","      <th>TAXI OUT</th>\n","      <th>WHEELS OFF</th>\n","      <th>...</th>\n","      <th>CARRIER DELAY</th>\n","      <th>WEATHER DELAY</th>\n","      <th>NAS DELAY</th>\n","      <th>SECURITY DELAY</th>\n","      <th>LATE AIRCRAFT DELAY</th>\n","      <th>Unnamed: 27</th>\n","      <th>IATA CODE</th>\n","      <th>AIRPORT</th>\n","      <th>CITY</th>\n","      <th>Flight_status</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2018-01-01</td>\n","      <td>UA</td>\n","      <td>2429.0</td>\n","      <td>Newark Liberty International Airport</td>\n","      <td>Denver International Airport</td>\n","      <td>1517.0</td>\n","      <td>1512.0</td>\n","      <td>-5.0</td>\n","      <td>15.0</td>\n","      <td>1527.0</td>\n","      <td>...</td>\n","      <td>19.455006</td>\n","      <td>3.636459</td>\n","      <td>15.885471</td>\n","      <td>0.093539</td>\n","      <td>25.64412</td>\n","      <td>0.0</td>\n","      <td>EWR</td>\n","      <td>Newark Liberty International Airport</td>\n","      <td>Newark</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2018-01-01</td>\n","      <td>UA</td>\n","      <td>2415.0</td>\n","      <td>Newark Liberty International Airport</td>\n","      <td>Portland International Airport</td>\n","      <td>825.0</td>\n","      <td>822.0</td>\n","      <td>-3.0</td>\n","      <td>15.0</td>\n","      <td>837.0</td>\n","      <td>...</td>\n","      <td>19.455006</td>\n","      <td>3.636459</td>\n","      <td>15.885471</td>\n","      <td>0.093539</td>\n","      <td>25.64412</td>\n","      <td>0.0</td>\n","      <td>EWR</td>\n","      <td>Newark Liberty International Airport</td>\n","      <td>Newark</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2018-01-01</td>\n","      <td>UA</td>\n","      <td>2414.0</td>\n","      <td>Newark Liberty International Airport</td>\n","      <td>Hartsfield-Jackson Atlanta International Airport</td>\n","      <td>1044.0</td>\n","      <td>1055.0</td>\n","      <td>11.0</td>\n","      <td>11.0</td>\n","      <td>1106.0</td>\n","      <td>...</td>\n","      <td>19.455006</td>\n","      <td>3.636459</td>\n","      <td>15.885471</td>\n","      <td>0.093539</td>\n","      <td>25.64412</td>\n","      <td>0.0</td>\n","      <td>EWR</td>\n","      <td>Newark Liberty International Airport</td>\n","      <td>Newark</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2018-01-01</td>\n","      <td>UA</td>\n","      <td>2411.0</td>\n","      <td>Newark Liberty International Airport</td>\n","      <td>Sacramento International Airport</td>\n","      <td>1810.0</td>\n","      <td>1922.0</td>\n","      <td>72.0</td>\n","      <td>16.0</td>\n","      <td>1938.0</td>\n","      <td>...</td>\n","      <td>7.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>18.00000</td>\n","      <td>0.0</td>\n","      <td>EWR</td>\n","      <td>Newark Liberty International Airport</td>\n","      <td>Newark</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2018-01-01</td>\n","      <td>UA</td>\n","      <td>2406.0</td>\n","      <td>Newark Liberty International Airport</td>\n","      <td>McGhee Tyson Airport</td>\n","      <td>830.0</td>\n","      <td>844.0</td>\n","      <td>14.0</td>\n","      <td>20.0</td>\n","      <td>904.0</td>\n","      <td>...</td>\n","      <td>19.455006</td>\n","      <td>3.636459</td>\n","      <td>15.885471</td>\n","      <td>0.093539</td>\n","      <td>25.64412</td>\n","      <td>0.0</td>\n","      <td>EWR</td>\n","      <td>Newark Liberty International Airport</td>\n","      <td>Newark</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 32 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5f36c01e-169c-45ae-a62f-b639de7266bf')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-5f36c01e-169c-45ae-a62f-b639de7266bf button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-5f36c01e-169c-45ae-a62f-b639de7266bf');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-0450448f-6966-4b96-b7b9-12870308c179\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0450448f-6966-4b96-b7b9-12870308c179')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-0450448f-6966-4b96-b7b9-12870308c179 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":13}]},{"cell_type":"markdown","source":["This code will convert the specified columns to the 'category' data type. This can be helpful in terms of memory usage and performance, especially if the columns have a limited number of unique values. After running this code, the specified columns in new_flight_df will be of the 'category' and 'interger' data type."],"metadata":{"id":"UDKAv9r9nwzt"}},{"cell_type":"code","source":["# List of columns to convert to 'category'\n","columns_to_convert = ['OP CARRIER', 'OP CARRIER FL NUM', 'ORIGIN', 'DEST', 'IATA CODE', 'AIRPORT', 'CITY', 'Flight_status']\n","\n","# Convert the specified columns to 'category'\n","new_flight_df[columns_to_convert] = new_flight_df[columns_to_convert].astype('category')\n","\n","# Columns to convert to integer\n","columns_to_convert = ['FL DATE','CRS DEP TIME', 'DEP TIME', 'DEP DELAY', 'TAXI OUT', 'WHEELS OFF', 'WHEELS ON', 'TAXI IN', 'CRS ARR TIME', 'ARR TIME', 'ARR DELAY', 'CANCELLED', 'DIVERTED', 'CRS ELAPSED TIME', 'ACTUAL ELAPSED TIME', 'AIR TIME', 'DISTANCE', 'CARRIER DELAY', 'WEATHER DELAY', 'NAS DELAY', 'SECURITY DELAY', 'LATE AIRCRAFT DELAY', 'Unnamed: 27']\n","\n","# Convert specified columns to integer\n","new_flight_df[columns_to_convert] = new_flight_df[columns_to_convert].astype(int)\n","\n","new_flight_df.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YAHlmlsQn7AL","executionInfo":{"status":"ok","timestamp":1700591562755,"user_tz":-480,"elapsed":14393,"user":{"displayName":"Md Nizam Sapiee","userId":"06218600148546546203"}},"outputId":"02ec3d70-f846-4245-d18d-70f674d5d2f4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","Int64Index: 7213451 entries, 0 to 7213450\n","Data columns (total 32 columns):\n"," #   Column               Dtype   \n","---  ------               -----   \n"," 0   FL DATE              int64   \n"," 1   OP CARRIER           category\n"," 2   OP CARRIER FL NUM    category\n"," 3   ORIGIN               category\n"," 4   DEST                 category\n"," 5   CRS DEP TIME         int64   \n"," 6   DEP TIME             int64   \n"," 7   DEP DELAY            int64   \n"," 8   TAXI OUT             int64   \n"," 9   WHEELS OFF           int64   \n"," 10  WHEELS ON            int64   \n"," 11  TAXI IN              int64   \n"," 12  CRS ARR TIME         int64   \n"," 13  ARR TIME             int64   \n"," 14  ARR DELAY            int64   \n"," 15  CANCELLED            int64   \n"," 16  CANCELLATION CODE    object  \n"," 17  DIVERTED             int64   \n"," 18  CRS ELAPSED TIME     int64   \n"," 19  ACTUAL ELAPSED TIME  int64   \n"," 20  AIR TIME             int64   \n"," 21  DISTANCE             int64   \n"," 22  CARRIER DELAY        int64   \n"," 23  WEATHER DELAY        int64   \n"," 24  NAS DELAY            int64   \n"," 25  SECURITY DELAY       int64   \n"," 26  LATE AIRCRAFT DELAY  int64   \n"," 27  Unnamed: 27          int64   \n"," 28  IATA CODE            category\n"," 29  AIRPORT              category\n"," 30  CITY                 category\n"," 31  Flight_status        category\n","dtypes: category(8), int64(23), object(1)\n","memory usage: 1.4+ GB\n"]}]},{"cell_type":"markdown","source":["**drop** the specified columns from your DataFrame, you can use the drop method. Here's an example:\n","\n","This code will remove the specified columns from your DataFrame. Make sure to adjust the column names and DataFrame variable according to your actual DataFrame structure and variable names."],"metadata":{"id":"HMKU4JNOeuzR"}},{"cell_type":"code","source":["columns_to_drop = ['CANCELLATION CODE', 'TAXI OUT', 'WHEELS OFF', 'NAS DELAY', 'SECURITY DELAY', 'Unnamed: 27', 'IATA CODE', 'AIRPORT', 'CITY','TAXI IN','CANCELLED','DIVERTED']\n","\n","new_flight_df = new_flight_df.drop(columns=columns_to_drop)\n","\n","new_flight_df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":538},"id":"Mvmu0yzUe2qi","executionInfo":{"status":"ok","timestamp":1700591574116,"user_tz":-480,"elapsed":849,"user":{"displayName":"Md Nizam Sapiee","userId":"06218600148546546203"}},"outputId":"bf1b0c1c-f842-4c4e-c036-cde270e187ff"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["               FL DATE OP CARRIER OP CARRIER FL NUM  \\\n","0  1514764800000000000         UA            2429.0   \n","1  1514764800000000000         UA            2415.0   \n","2  1514764800000000000         UA            2414.0   \n","3  1514764800000000000         UA            2411.0   \n","4  1514764800000000000         UA            2406.0   \n","\n","                                 ORIGIN  \\\n","0  Newark Liberty International Airport   \n","1  Newark Liberty International Airport   \n","2  Newark Liberty International Airport   \n","3  Newark Liberty International Airport   \n","4  Newark Liberty International Airport   \n","\n","                                               DEST  CRS DEP TIME  DEP TIME  \\\n","0                      Denver International Airport          1517      1512   \n","1                    Portland International Airport           825       822   \n","2  Hartsfield-Jackson Atlanta International Airport          1044      1055   \n","3                  Sacramento International Airport          1810      1922   \n","4                              McGhee Tyson Airport           830       844   \n","\n","   DEP DELAY  WHEELS ON  CRS ARR TIME  ARR TIME  ARR DELAY  CRS ELAPSED TIME  \\\n","0         -5       1712          1745      1722        -23               268   \n","1         -3       1104          1135      1109        -26               370   \n","2         11       1310          1318      1315         -3               154   \n","3         72       2157          2136      2201         25               386   \n","4         14       1052          1049      1055          6               139   \n","\n","   ACTUAL ELAPSED TIME  AIR TIME  DISTANCE  CARRIER DELAY  WEATHER DELAY  \\\n","0                  250       225      1605             19              3   \n","1                  347       327      2434             19              3   \n","2                  140       124       746             19              3   \n","3                  339       319      2500              7              0   \n","4                  131       108       631             19              3   \n","\n","   LATE AIRCRAFT DELAY Flight_status  \n","0                   25             0  \n","1                   25             0  \n","2                   25             0  \n","3                   18             1  \n","4                   25             0  "],"text/html":["\n","  <div id=\"df-46c4debe-6366-4bb7-b33f-f8e0889e1cb5\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>FL DATE</th>\n","      <th>OP CARRIER</th>\n","      <th>OP CARRIER FL NUM</th>\n","      <th>ORIGIN</th>\n","      <th>DEST</th>\n","      <th>CRS DEP TIME</th>\n","      <th>DEP TIME</th>\n","      <th>DEP DELAY</th>\n","      <th>WHEELS ON</th>\n","      <th>CRS ARR TIME</th>\n","      <th>ARR TIME</th>\n","      <th>ARR DELAY</th>\n","      <th>CRS ELAPSED TIME</th>\n","      <th>ACTUAL ELAPSED TIME</th>\n","      <th>AIR TIME</th>\n","      <th>DISTANCE</th>\n","      <th>CARRIER DELAY</th>\n","      <th>WEATHER DELAY</th>\n","      <th>LATE AIRCRAFT DELAY</th>\n","      <th>Flight_status</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1514764800000000000</td>\n","      <td>UA</td>\n","      <td>2429.0</td>\n","      <td>Newark Liberty International Airport</td>\n","      <td>Denver International Airport</td>\n","      <td>1517</td>\n","      <td>1512</td>\n","      <td>-5</td>\n","      <td>1712</td>\n","      <td>1745</td>\n","      <td>1722</td>\n","      <td>-23</td>\n","      <td>268</td>\n","      <td>250</td>\n","      <td>225</td>\n","      <td>1605</td>\n","      <td>19</td>\n","      <td>3</td>\n","      <td>25</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1514764800000000000</td>\n","      <td>UA</td>\n","      <td>2415.0</td>\n","      <td>Newark Liberty International Airport</td>\n","      <td>Portland International Airport</td>\n","      <td>825</td>\n","      <td>822</td>\n","      <td>-3</td>\n","      <td>1104</td>\n","      <td>1135</td>\n","      <td>1109</td>\n","      <td>-26</td>\n","      <td>370</td>\n","      <td>347</td>\n","      <td>327</td>\n","      <td>2434</td>\n","      <td>19</td>\n","      <td>3</td>\n","      <td>25</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1514764800000000000</td>\n","      <td>UA</td>\n","      <td>2414.0</td>\n","      <td>Newark Liberty International Airport</td>\n","      <td>Hartsfield-Jackson Atlanta International Airport</td>\n","      <td>1044</td>\n","      <td>1055</td>\n","      <td>11</td>\n","      <td>1310</td>\n","      <td>1318</td>\n","      <td>1315</td>\n","      <td>-3</td>\n","      <td>154</td>\n","      <td>140</td>\n","      <td>124</td>\n","      <td>746</td>\n","      <td>19</td>\n","      <td>3</td>\n","      <td>25</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1514764800000000000</td>\n","      <td>UA</td>\n","      <td>2411.0</td>\n","      <td>Newark Liberty International Airport</td>\n","      <td>Sacramento International Airport</td>\n","      <td>1810</td>\n","      <td>1922</td>\n","      <td>72</td>\n","      <td>2157</td>\n","      <td>2136</td>\n","      <td>2201</td>\n","      <td>25</td>\n","      <td>386</td>\n","      <td>339</td>\n","      <td>319</td>\n","      <td>2500</td>\n","      <td>7</td>\n","      <td>0</td>\n","      <td>18</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1514764800000000000</td>\n","      <td>UA</td>\n","      <td>2406.0</td>\n","      <td>Newark Liberty International Airport</td>\n","      <td>McGhee Tyson Airport</td>\n","      <td>830</td>\n","      <td>844</td>\n","      <td>14</td>\n","      <td>1052</td>\n","      <td>1049</td>\n","      <td>1055</td>\n","      <td>6</td>\n","      <td>139</td>\n","      <td>131</td>\n","      <td>108</td>\n","      <td>631</td>\n","      <td>19</td>\n","      <td>3</td>\n","      <td>25</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-46c4debe-6366-4bb7-b33f-f8e0889e1cb5')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-46c4debe-6366-4bb7-b33f-f8e0889e1cb5 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-46c4debe-6366-4bb7-b33f-f8e0889e1cb5');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-5191245d-4d91-4f0e-89eb-e019c474d057\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5191245d-4d91-4f0e-89eb-e019c474d057')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-5191245d-4d91-4f0e-89eb-e019c474d057 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":15}]},{"cell_type":"markdown","source":["**visualization**\n","This code will create a count plot that shows the distribution of flight statuses ('on time' vs. 'delayed'). Adjust the plot parameters as needed for your specific preferences."],"metadata":{"id":"ytRf_jNi12qz"}},{"cell_type":"code","source":["# Set the style of seaborn\n","sns.set(style=\"whitegrid\")\n","\n","# Create a count plot for 'Flight_status'\n","plt.figure(figsize=(8, 6))\n","sns.countplot(x='Flight_status', data=new_flight_df, palette='viridis')\n","plt.title('Flight Status Count')\n","plt.xlabel('Flight Status')\n","plt.ylabel('Count')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":573},"id":"xkqAH_AM14nm","executionInfo":{"status":"ok","timestamp":1700591592850,"user_tz":-480,"elapsed":976,"user":{"displayName":"Md Nizam Sapiee","userId":"06218600148546546203"}},"outputId":"2dcfac9b-200f-40b8-cb6c-2c3a906c0690"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 800x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# Generate correlation matrix\n","correlation_matrix = new_flight_df.corr()\n","\n","# Create a heatmap\n","plt.figure(figsize=(12, 10))\n","sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=\".2f\", linewidths=.5)\n","plt.title('Correlation Heatmap')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"c2vhX3Gk2N3q","executionInfo":{"status":"ok","timestamp":1700591604617,"user_tz":-480,"elapsed":7617,"user":{"displayName":"Md Nizam Sapiee","userId":"06218600148546546203"}},"outputId":"e41c2ab3-5afd-4613-e288-b608bb4a04db"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-17-6c50dc0f42a0>:2: FutureWarning: The default value of numeric_only in DataFrame.corr is deprecated. In a future version, it will default to False. Select only valid columns or specify the value of numeric_only to silence this warning.\n","  correlation_matrix = new_flight_df.corr()\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x1000 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["new_flight_df.describe()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":355},"id":"2YerHDZq2bQx","executionInfo":{"status":"ok","timestamp":1700591633030,"user_tz":-480,"elapsed":4053,"user":{"displayName":"Md Nizam Sapiee","userId":"06218600148546546203"}},"outputId":"bcfd3bd3-b0a3-4eb2-ae16-e326b7cd650a"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["            FL DATE  CRS DEP TIME      DEP TIME     DEP DELAY     WHEELS ON  \\\n","count  7.213451e+06  7.213451e+06  7.213451e+06  7.213451e+06  7.213451e+06   \n","mean   1.530594e+18  1.329687e+03  1.333841e+03  9.954095e+00  1.462159e+03   \n","std    8.967593e+15  4.909318e+02  5.005623e+02  4.446401e+01  5.290396e+02   \n","min    1.514765e+18  1.000000e+00  1.000000e+00 -1.220000e+02  1.000000e+00   \n","25%    1.522886e+18  9.150000e+02  9.210000e+02 -5.000000e+00  1.049000e+03   \n","50%    1.530662e+18  1.320000e+03  1.333000e+03 -2.000000e+00  1.462000e+03   \n","75%    1.538266e+18  1.735000e+03  1.740000e+03  8.000000e+00  1.907000e+03   \n","max    1.546214e+18  2.359000e+03  2.400000e+03  2.710000e+03  2.400000e+03   \n","\n","       CRS ARR TIME      ARR TIME     ARR DELAY  CRS ELAPSED TIME  \\\n","count  7.213451e+06  7.213451e+06  7.213451e+06      7.213451e+06   \n","mean   1.486341e+03  1.466771e+03  5.047658e+00      1.411356e+02   \n","std    5.183122e+02  5.332458e+02  4.647873e+01      7.334426e+01   \n","min    1.000000e+00  1.000000e+00 -1.200000e+02     -9.900000e+01   \n","25%    1.100000e+03  1.053000e+03 -1.400000e+01      8.800000e+01   \n","50%    1.515000e+03  1.466000e+03 -5.000000e+00      1.220000e+02   \n","75%    1.919000e+03  1.912000e+03  7.000000e+00      1.710000e+02   \n","max    2.400000e+03  2.400000e+03  2.692000e+03      7.040000e+02   \n","\n","       ACTUAL ELAPSED TIME      AIR TIME      DISTANCE  CARRIER DELAY  \\\n","count         7.213451e+06  7.213451e+06  7.213451e+06   7.213451e+06   \n","mean          1.364906e+02  1.114927e+02  7.999895e+02   1.908533e+01   \n","std           7.245282e+01  7.044713e+01  5.981781e+02   2.551035e+01   \n","min           1.400000e+01  7.000000e+00  3.100000e+01   0.000000e+00   \n","25%           8.400000e+01  6.000000e+01  3.630000e+02   1.900000e+01   \n","50%           1.190000e+02  9.400000e+01  6.320000e+02   1.900000e+01   \n","75%           1.660000e+02  1.400000e+02  1.034000e+03   1.900000e+01   \n","max           7.570000e+02  6.960000e+02  4.983000e+03   2.109000e+03   \n","\n","       WEATHER DELAY  LATE AIRCRAFT DELAY  \n","count   7.213451e+06         7.213451e+06  \n","mean    3.119353e+00         2.512079e+01  \n","std     1.299193e+01         2.156169e+01  \n","min     0.000000e+00         0.000000e+00  \n","25%     3.000000e+00         2.500000e+01  \n","50%     3.000000e+00         2.500000e+01  \n","75%     3.000000e+00         2.500000e+01  \n","max     2.692000e+03         2.454000e+03  "],"text/html":["\n","  <div id=\"df-1e8dc348-1bc8-4d35-87a4-f32fdf45119b\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>FL DATE</th>\n","      <th>CRS DEP TIME</th>\n","      <th>DEP TIME</th>\n","      <th>DEP DELAY</th>\n","      <th>WHEELS ON</th>\n","      <th>CRS ARR TIME</th>\n","      <th>ARR TIME</th>\n","      <th>ARR DELAY</th>\n","      <th>CRS ELAPSED TIME</th>\n","      <th>ACTUAL ELAPSED TIME</th>\n","      <th>AIR TIME</th>\n","      <th>DISTANCE</th>\n","      <th>CARRIER DELAY</th>\n","      <th>WEATHER DELAY</th>\n","      <th>LATE AIRCRAFT DELAY</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>7.213451e+06</td>\n","      <td>7.213451e+06</td>\n","      <td>7.213451e+06</td>\n","      <td>7.213451e+06</td>\n","      <td>7.213451e+06</td>\n","      <td>7.213451e+06</td>\n","      <td>7.213451e+06</td>\n","      <td>7.213451e+06</td>\n","      <td>7.213451e+06</td>\n","      <td>7.213451e+06</td>\n","      <td>7.213451e+06</td>\n","      <td>7.213451e+06</td>\n","      <td>7.213451e+06</td>\n","      <td>7.213451e+06</td>\n","      <td>7.213451e+06</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>1.530594e+18</td>\n","      <td>1.329687e+03</td>\n","      <td>1.333841e+03</td>\n","      <td>9.954095e+00</td>\n","      <td>1.462159e+03</td>\n","      <td>1.486341e+03</td>\n","      <td>1.466771e+03</td>\n","      <td>5.047658e+00</td>\n","      <td>1.411356e+02</td>\n","      <td>1.364906e+02</td>\n","      <td>1.114927e+02</td>\n","      <td>7.999895e+02</td>\n","      <td>1.908533e+01</td>\n","      <td>3.119353e+00</td>\n","      <td>2.512079e+01</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>8.967593e+15</td>\n","      <td>4.909318e+02</td>\n","      <td>5.005623e+02</td>\n","      <td>4.446401e+01</td>\n","      <td>5.290396e+02</td>\n","      <td>5.183122e+02</td>\n","      <td>5.332458e+02</td>\n","      <td>4.647873e+01</td>\n","      <td>7.334426e+01</td>\n","      <td>7.245282e+01</td>\n","      <td>7.044713e+01</td>\n","      <td>5.981781e+02</td>\n","      <td>2.551035e+01</td>\n","      <td>1.299193e+01</td>\n","      <td>2.156169e+01</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>1.514765e+18</td>\n","      <td>1.000000e+00</td>\n","      <td>1.000000e+00</td>\n","      <td>-1.220000e+02</td>\n","      <td>1.000000e+00</td>\n","      <td>1.000000e+00</td>\n","      <td>1.000000e+00</td>\n","      <td>-1.200000e+02</td>\n","      <td>-9.900000e+01</td>\n","      <td>1.400000e+01</td>\n","      <td>7.000000e+00</td>\n","      <td>3.100000e+01</td>\n","      <td>0.000000e+00</td>\n","      <td>0.000000e+00</td>\n","      <td>0.000000e+00</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>1.522886e+18</td>\n","      <td>9.150000e+02</td>\n","      <td>9.210000e+02</td>\n","      <td>-5.000000e+00</td>\n","      <td>1.049000e+03</td>\n","      <td>1.100000e+03</td>\n","      <td>1.053000e+03</td>\n","      <td>-1.400000e+01</td>\n","      <td>8.800000e+01</td>\n","      <td>8.400000e+01</td>\n","      <td>6.000000e+01</td>\n","      <td>3.630000e+02</td>\n","      <td>1.900000e+01</td>\n","      <td>3.000000e+00</td>\n","      <td>2.500000e+01</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>1.530662e+18</td>\n","      <td>1.320000e+03</td>\n","      <td>1.333000e+03</td>\n","      <td>-2.000000e+00</td>\n","      <td>1.462000e+03</td>\n","      <td>1.515000e+03</td>\n","      <td>1.466000e+03</td>\n","      <td>-5.000000e+00</td>\n","      <td>1.220000e+02</td>\n","      <td>1.190000e+02</td>\n","      <td>9.400000e+01</td>\n","      <td>6.320000e+02</td>\n","      <td>1.900000e+01</td>\n","      <td>3.000000e+00</td>\n","      <td>2.500000e+01</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>1.538266e+18</td>\n","      <td>1.735000e+03</td>\n","      <td>1.740000e+03</td>\n","      <td>8.000000e+00</td>\n","      <td>1.907000e+03</td>\n","      <td>1.919000e+03</td>\n","      <td>1.912000e+03</td>\n","      <td>7.000000e+00</td>\n","      <td>1.710000e+02</td>\n","      <td>1.660000e+02</td>\n","      <td>1.400000e+02</td>\n","      <td>1.034000e+03</td>\n","      <td>1.900000e+01</td>\n","      <td>3.000000e+00</td>\n","      <td>2.500000e+01</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>1.546214e+18</td>\n","      <td>2.359000e+03</td>\n","      <td>2.400000e+03</td>\n","      <td>2.710000e+03</td>\n","      <td>2.400000e+03</td>\n","      <td>2.400000e+03</td>\n","      <td>2.400000e+03</td>\n","      <td>2.692000e+03</td>\n","      <td>7.040000e+02</td>\n","      <td>7.570000e+02</td>\n","      <td>6.960000e+02</td>\n","      <td>4.983000e+03</td>\n","      <td>2.109000e+03</td>\n","      <td>2.692000e+03</td>\n","      <td>2.454000e+03</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1e8dc348-1bc8-4d35-87a4-f32fdf45119b')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-1e8dc348-1bc8-4d35-87a4-f32fdf45119b button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-1e8dc348-1bc8-4d35-87a4-f32fdf45119b');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-4cd8ce57-6cc8-4cf2-acd3-f27197ecedd3\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4cd8ce57-6cc8-4cf2-acd3-f27197ecedd3')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-4cd8ce57-6cc8-4cf2-acd3-f27197ecedd3 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":18}]},{"cell_type":"markdown","source":["# numerical features\n","\n","Normalizing numerical features is a common preprocessing step in machine learning. The MinMaxScaler from the sklearn.preprocessing module is often used for this purpose. now can normalize  numerical columns\n","\n","This code snippet normalizes the values in the specified numerical columns to a range between 0 and 1. Replace new_flight_df with the actual name of your DataFrame.\n","\n","Remember, normalization should be applied separately to the training and testing datasets to avoid data leakage. Fit the scaler on the training set and transform both the training and testing sets consistently.\n","\n"],"metadata":{"id":"rNhueAYxAEGX"}},{"cell_type":"code","source":["# Assuming `new_flight_df` is your DataFrame\n","\n","# Identify numerical columns\n","numerical_columns = ['CRS DEP TIME', 'DEP TIME', 'DEP DELAY',\n","                     'CRS ARR TIME', 'ARR TIME', 'ARR DELAY', 'CRS ELAPSED TIME',\n","                     'ACTUAL ELAPSED TIME', 'AIR TIME', 'DISTANCE', 'CARRIER DELAY',\n","                     'WEATHER DELAY', 'LATE AIRCRAFT DELAY']\n","\n","# Initialize MinMaxScaler\n","scaler = MinMaxScaler()\n","\n","# Apply normalization to each numerical column\n","new_flight_df[numerical_columns] = scaler.fit_transform(new_flight_df[numerical_columns])\n","\n","# Display the updated DataFrame\n","new_flight_df.head()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":538},"id":"6a1BWq2SBGVa","executionInfo":{"status":"ok","timestamp":1700591673828,"user_tz":-480,"elapsed":4939,"user":{"displayName":"Md Nizam Sapiee","userId":"06218600148546546203"}},"outputId":"70de551e-decb-497c-aab7-6339c4c8d820"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["               FL DATE OP CARRIER OP CARRIER FL NUM  \\\n","0  1514764800000000000         UA            2429.0   \n","1  1514764800000000000         UA            2415.0   \n","2  1514764800000000000         UA            2414.0   \n","3  1514764800000000000         UA            2411.0   \n","4  1514764800000000000         UA            2406.0   \n","\n","                                 ORIGIN  \\\n","0  Newark Liberty International Airport   \n","1  Newark Liberty International Airport   \n","2  Newark Liberty International Airport   \n","3  Newark Liberty International Airport   \n","4  Newark Liberty International Airport   \n","\n","                                               DEST  CRS DEP TIME  DEP TIME  \\\n","0                      Denver International Airport      0.642918  0.629846   \n","1                    Portland International Airport      0.349449  0.342226   \n","2  Hartsfield-Jackson Atlanta International Airport      0.442324  0.439350   \n","3                  Sacramento International Airport      0.767176  0.800750   \n","4                              McGhee Tyson Airport      0.351569  0.351396   \n","\n","   DEP DELAY  WHEELS ON  CRS ARR TIME  ARR TIME  ARR DELAY  CRS ELAPSED TIME  \\\n","0   0.041314       1712      0.726970  0.717382   0.034495          0.457036   \n","1   0.042020       1104      0.472697  0.461859   0.033428          0.584060   \n","2   0.046963       1310      0.548979  0.547728   0.041607          0.315068   \n","3   0.068503       2157      0.889954  0.917049   0.051565          0.603985   \n","4   0.048023       1052      0.436849  0.439350   0.044808          0.296389   \n","\n","   ACTUAL ELAPSED TIME  AIR TIME  DISTANCE  CARRIER DELAY  WEATHER DELAY  \\\n","0             0.317631  0.316401  0.317851       0.009009       0.001114   \n","1             0.448183  0.464441  0.485258       0.009009       0.001114   \n","2             0.169583  0.169811  0.144386       0.009009       0.001114   \n","3             0.437416  0.452830  0.498586       0.003319       0.000000   \n","4             0.157470  0.146589  0.121163       0.009009       0.001114   \n","\n","   LATE AIRCRAFT DELAY Flight_status  \n","0             0.010187             0  \n","1             0.010187             0  \n","2             0.010187             0  \n","3             0.007335             1  \n","4             0.010187             0  "],"text/html":["\n","  <div id=\"df-4ad50df6-a02c-47cf-91b8-b99af96fd20c\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>FL DATE</th>\n","      <th>OP CARRIER</th>\n","      <th>OP CARRIER FL NUM</th>\n","      <th>ORIGIN</th>\n","      <th>DEST</th>\n","      <th>CRS DEP TIME</th>\n","      <th>DEP TIME</th>\n","      <th>DEP DELAY</th>\n","      <th>WHEELS ON</th>\n","      <th>CRS ARR TIME</th>\n","      <th>ARR TIME</th>\n","      <th>ARR DELAY</th>\n","      <th>CRS ELAPSED TIME</th>\n","      <th>ACTUAL ELAPSED TIME</th>\n","      <th>AIR TIME</th>\n","      <th>DISTANCE</th>\n","      <th>CARRIER DELAY</th>\n","      <th>WEATHER DELAY</th>\n","      <th>LATE AIRCRAFT DELAY</th>\n","      <th>Flight_status</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1514764800000000000</td>\n","      <td>UA</td>\n","      <td>2429.0</td>\n","      <td>Newark Liberty International Airport</td>\n","      <td>Denver International Airport</td>\n","      <td>0.642918</td>\n","      <td>0.629846</td>\n","      <td>0.041314</td>\n","      <td>1712</td>\n","      <td>0.726970</td>\n","      <td>0.717382</td>\n","      <td>0.034495</td>\n","      <td>0.457036</td>\n","      <td>0.317631</td>\n","      <td>0.316401</td>\n","      <td>0.317851</td>\n","      <td>0.009009</td>\n","      <td>0.001114</td>\n","      <td>0.010187</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1514764800000000000</td>\n","      <td>UA</td>\n","      <td>2415.0</td>\n","      <td>Newark Liberty International Airport</td>\n","      <td>Portland International Airport</td>\n","      <td>0.349449</td>\n","      <td>0.342226</td>\n","      <td>0.042020</td>\n","      <td>1104</td>\n","      <td>0.472697</td>\n","      <td>0.461859</td>\n","      <td>0.033428</td>\n","      <td>0.584060</td>\n","      <td>0.448183</td>\n","      <td>0.464441</td>\n","      <td>0.485258</td>\n","      <td>0.009009</td>\n","      <td>0.001114</td>\n","      <td>0.010187</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1514764800000000000</td>\n","      <td>UA</td>\n","      <td>2414.0</td>\n","      <td>Newark Liberty International Airport</td>\n","      <td>Hartsfield-Jackson Atlanta International Airport</td>\n","      <td>0.442324</td>\n","      <td>0.439350</td>\n","      <td>0.046963</td>\n","      <td>1310</td>\n","      <td>0.548979</td>\n","      <td>0.547728</td>\n","      <td>0.041607</td>\n","      <td>0.315068</td>\n","      <td>0.169583</td>\n","      <td>0.169811</td>\n","      <td>0.144386</td>\n","      <td>0.009009</td>\n","      <td>0.001114</td>\n","      <td>0.010187</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1514764800000000000</td>\n","      <td>UA</td>\n","      <td>2411.0</td>\n","      <td>Newark Liberty International Airport</td>\n","      <td>Sacramento International Airport</td>\n","      <td>0.767176</td>\n","      <td>0.800750</td>\n","      <td>0.068503</td>\n","      <td>2157</td>\n","      <td>0.889954</td>\n","      <td>0.917049</td>\n","      <td>0.051565</td>\n","      <td>0.603985</td>\n","      <td>0.437416</td>\n","      <td>0.452830</td>\n","      <td>0.498586</td>\n","      <td>0.003319</td>\n","      <td>0.000000</td>\n","      <td>0.007335</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1514764800000000000</td>\n","      <td>UA</td>\n","      <td>2406.0</td>\n","      <td>Newark Liberty International Airport</td>\n","      <td>McGhee Tyson Airport</td>\n","      <td>0.351569</td>\n","      <td>0.351396</td>\n","      <td>0.048023</td>\n","      <td>1052</td>\n","      <td>0.436849</td>\n","      <td>0.439350</td>\n","      <td>0.044808</td>\n","      <td>0.296389</td>\n","      <td>0.157470</td>\n","      <td>0.146589</td>\n","      <td>0.121163</td>\n","      <td>0.009009</td>\n","      <td>0.001114</td>\n","      <td>0.010187</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4ad50df6-a02c-47cf-91b8-b99af96fd20c')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-4ad50df6-a02c-47cf-91b8-b99af96fd20c button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-4ad50df6-a02c-47cf-91b8-b99af96fd20c');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-128bd38a-bd43-4ad3-b433-7ff1b6fba58a\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-128bd38a-bd43-4ad3-b433-7ff1b6fba58a')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-128bd38a-bd43-4ad3-b433-7ff1b6fba58a button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":20}]},{"cell_type":"markdown","source":["The result you've posted appears to be the DataFrame after normalizing the numerical columns using the MinMaxScaler. Here's an explanation of some key points:\n","\n","\n","\n","*   FL DATE, OP CARRIER, OP CARRIER FL NUM, ORIGIN, DEST: These columns remain unchanged, as they are not numerical and don't need normalization.\n","*   Numerical Columns (CRS DEP TIME to LATE AIRCRAFT DELAY): These columns have been normalized using the MinMaxScaler. The values are now scaled between 0 and 1. For example, CRS DEP TIME originally had values in minutes, and after normalization, the values are now between 0 and 1.\n","*   nnamed: 27, IATA CODE, AIRPORT, CITY, Flight_status: These columns remain unchanged, as they are not numerical and don't need normalization.\n","*   Normalized Values: For instance, in the DEP DELAY column, a value of 0.041314 means that the original value has been scaled to this proportion of the range.\n","*   Flight_status: It appears to be the target variable. Its values haven't been normalized, as it's a categorical variable.\n","\n","In summary, the numerical features have been scaled to a common range (0 to 1), making it easier for machine learning algorithms to work with them. The non-numerical columns and the target variable remain unchanged.\n","\n","\n","\n","\n"],"metadata":{"id":"RlYlq416B392"}},{"cell_type":"markdown","source":["# label encoding.\n","\n","\n","use label encoding on categorical columns in your dataset, you can leverage the LabelEncoder from the sklearn.preprocessing module. Here's an example\n","\n","In this example, replace **new_flight_df** with the actual name of your DataFrame. The LabelEncoder is applied to each categorical column individually, transforming the categorical values into numerical labels. Note that **fit_transform** is used, which fits the encoder on the column and transforms its values in one step."],"metadata":{"id":"NW85NhDp-ZzA"}},{"cell_type":"code","source":["# Assuming `new_flight_df` is your DataFrame\n","\n","# Identify categorical columns\n","categorical_columns = ['ORIGIN','DEST','OP CARRIER']\n","\n","# Initialize LabelEncoder\n","label_encoder = LabelEncoder()\n","\n","# Apply label encoding to each categorical column\n","for column in categorical_columns:\n","    new_flight_df[column] = label_encoder.fit_transform(new_flight_df[column])\n","\n","# Display the updated DataFrame\n","new_flight_df.head()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":261},"id":"iZNItgMQ_91M","executionInfo":{"status":"ok","timestamp":1700591752409,"user_tz":-480,"elapsed":4298,"user":{"displayName":"Md Nizam Sapiee","userId":"06218600148546546203"}},"outputId":"229392c9-e5f8-4319-dafc-2fd47b5476ba"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["               FL DATE  OP CARRIER OP CARRIER FL NUM  ORIGIN  DEST  \\\n","0  1514764800000000000          13            2429.0     221    76   \n","1  1514764800000000000          13            2415.0     221   252   \n","2  1514764800000000000          13            2414.0     221   132   \n","3  1514764800000000000          13            2411.0     221   278   \n","4  1514764800000000000          13            2406.0     221   197   \n","\n","   CRS DEP TIME  DEP TIME  DEP DELAY  WHEELS ON  CRS ARR TIME  ARR TIME  \\\n","0      0.642918  0.629846   0.041314       1712      0.726970  0.717382   \n","1      0.349449  0.342226   0.042020       1104      0.472697  0.461859   \n","2      0.442324  0.439350   0.046963       1310      0.548979  0.547728   \n","3      0.767176  0.800750   0.068503       2157      0.889954  0.917049   \n","4      0.351569  0.351396   0.048023       1052      0.436849  0.439350   \n","\n","   ARR DELAY  CRS ELAPSED TIME  ACTUAL ELAPSED TIME  AIR TIME  DISTANCE  \\\n","0   0.034495          0.457036             0.317631  0.316401  0.317851   \n","1   0.033428          0.584060             0.448183  0.464441  0.485258   \n","2   0.041607          0.315068             0.169583  0.169811  0.144386   \n","3   0.051565          0.603985             0.437416  0.452830  0.498586   \n","4   0.044808          0.296389             0.157470  0.146589  0.121163   \n","\n","   CARRIER DELAY  WEATHER DELAY  LATE AIRCRAFT DELAY Flight_status  \n","0       0.009009       0.001114             0.010187             0  \n","1       0.009009       0.001114             0.010187             0  \n","2       0.009009       0.001114             0.010187             0  \n","3       0.003319       0.000000             0.007335             1  \n","4       0.009009       0.001114             0.010187             0  "],"text/html":["\n","  <div id=\"df-d985a43a-3ae1-442d-ba75-3344cf5b4936\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>FL DATE</th>\n","      <th>OP CARRIER</th>\n","      <th>OP CARRIER FL NUM</th>\n","      <th>ORIGIN</th>\n","      <th>DEST</th>\n","      <th>CRS DEP TIME</th>\n","      <th>DEP TIME</th>\n","      <th>DEP DELAY</th>\n","      <th>WHEELS ON</th>\n","      <th>CRS ARR TIME</th>\n","      <th>ARR TIME</th>\n","      <th>ARR DELAY</th>\n","      <th>CRS ELAPSED TIME</th>\n","      <th>ACTUAL ELAPSED TIME</th>\n","      <th>AIR TIME</th>\n","      <th>DISTANCE</th>\n","      <th>CARRIER DELAY</th>\n","      <th>WEATHER DELAY</th>\n","      <th>LATE AIRCRAFT DELAY</th>\n","      <th>Flight_status</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1514764800000000000</td>\n","      <td>13</td>\n","      <td>2429.0</td>\n","      <td>221</td>\n","      <td>76</td>\n","      <td>0.642918</td>\n","      <td>0.629846</td>\n","      <td>0.041314</td>\n","      <td>1712</td>\n","      <td>0.726970</td>\n","      <td>0.717382</td>\n","      <td>0.034495</td>\n","      <td>0.457036</td>\n","      <td>0.317631</td>\n","      <td>0.316401</td>\n","      <td>0.317851</td>\n","      <td>0.009009</td>\n","      <td>0.001114</td>\n","      <td>0.010187</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1514764800000000000</td>\n","      <td>13</td>\n","      <td>2415.0</td>\n","      <td>221</td>\n","      <td>252</td>\n","      <td>0.349449</td>\n","      <td>0.342226</td>\n","      <td>0.042020</td>\n","      <td>1104</td>\n","      <td>0.472697</td>\n","      <td>0.461859</td>\n","      <td>0.033428</td>\n","      <td>0.584060</td>\n","      <td>0.448183</td>\n","      <td>0.464441</td>\n","      <td>0.485258</td>\n","      <td>0.009009</td>\n","      <td>0.001114</td>\n","      <td>0.010187</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1514764800000000000</td>\n","      <td>13</td>\n","      <td>2414.0</td>\n","      <td>221</td>\n","      <td>132</td>\n","      <td>0.442324</td>\n","      <td>0.439350</td>\n","      <td>0.046963</td>\n","      <td>1310</td>\n","      <td>0.548979</td>\n","      <td>0.547728</td>\n","      <td>0.041607</td>\n","      <td>0.315068</td>\n","      <td>0.169583</td>\n","      <td>0.169811</td>\n","      <td>0.144386</td>\n","      <td>0.009009</td>\n","      <td>0.001114</td>\n","      <td>0.010187</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1514764800000000000</td>\n","      <td>13</td>\n","      <td>2411.0</td>\n","      <td>221</td>\n","      <td>278</td>\n","      <td>0.767176</td>\n","      <td>0.800750</td>\n","      <td>0.068503</td>\n","      <td>2157</td>\n","      <td>0.889954</td>\n","      <td>0.917049</td>\n","      <td>0.051565</td>\n","      <td>0.603985</td>\n","      <td>0.437416</td>\n","      <td>0.452830</td>\n","      <td>0.498586</td>\n","      <td>0.003319</td>\n","      <td>0.000000</td>\n","      <td>0.007335</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1514764800000000000</td>\n","      <td>13</td>\n","      <td>2406.0</td>\n","      <td>221</td>\n","      <td>197</td>\n","      <td>0.351569</td>\n","      <td>0.351396</td>\n","      <td>0.048023</td>\n","      <td>1052</td>\n","      <td>0.436849</td>\n","      <td>0.439350</td>\n","      <td>0.044808</td>\n","      <td>0.296389</td>\n","      <td>0.157470</td>\n","      <td>0.146589</td>\n","      <td>0.121163</td>\n","      <td>0.009009</td>\n","      <td>0.001114</td>\n","      <td>0.010187</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d985a43a-3ae1-442d-ba75-3344cf5b4936')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-d985a43a-3ae1-442d-ba75-3344cf5b4936 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-d985a43a-3ae1-442d-ba75-3344cf5b4936');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-63db8200-1c2b-4409-be63-0a35d96839c0\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-63db8200-1c2b-4409-be63-0a35d96839c0')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-63db8200-1c2b-4409-be63-0a35d96839c0 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":21}]},{"cell_type":"markdown","source":["seems to be the DataFrame after label encoding the categorical columns and normalizing the numerical columns using the MinMaxScaler. Let's break down the key aspects:\n","\n","*   Categorical Columns (FL DATE, OP CARRIER, ORIGIN, DEST, Unnamed: 27, IATA CODE, AIRPORT, CITY):\n","These columns have been label encoded, which means that each unique value in these columns has been replaced with a numerical label. For example, OP CARRIER has been encoded to 13 in the given snippet.\n","*   Numerical Columns (OP CARRIER FL NUM to LATE AIRCRAFT DELAY):\n","These columns have been normalized using the MinMaxScaler, which scales the values to a range between 0 and 1. The values in these columns are now proportions relative to the minimum and maximum values in each column.\n","*   Flight_status:\n","It appears to be the target variable. Its values haven't been normalized, as it's a categorical variable.\n","*   Normalized Values:\n","For instance, in the DEP DELAY column, a value of 0.041314 means that the original value has been scaled to this proportion of the range.\n","*   Label Encoding:\n","For instance, OP CARRIER had categorical values like 'UA' before, and after label encoding, it has been replaced with a numerical label (in this case, 13).\n","*   Other Columns:\n","The columns like CRS DEP TIME, DEP TIME, etc., have been normalized, meaning their values have been scaled between 0 and 1.\n","\n","In summary, label encoding is applied to categorical columns, and numerical columns are normalized to ensure that all values are on a similar scale, facilitating the training of machine learning models.\n","\n","\n","\n","\n"],"metadata":{"id":"T8oqlBrhDuAi"}},{"cell_type":"markdown","source":["# Train-Test Split: The dataset is split into training and testing sets.\n","\n","To perform a train-test split on your dataset with the target variable **'ARR DELAY'**,  can use the train_test_split function from the scikit-learn library. Here's an example code snippet:\n","\n","Make sure to replace 'ARR DELAY' with the actual name of  target variable. This code will split  data into training and testing sets, with 80% of the data used for training and 20% for testing. The random_state parameter ensures reproducibility.\n","\n","After splitting the data,  use X_train and y_train for training your model and X_test and y_test for evaluating its performance.\n"],"metadata":{"id":"SsoxgsWqEl8L"}},{"cell_type":"code","source":["# Assuming your dataset is named 'df'\n","# X contains all features except 'ARR DELAY', and y contains the target 'ARR DELAY'\n","X = new_flight_df.drop(columns=['ARR DELAY'])\n","y = new_flight_df['ARR DELAY']\n","\n","# Perform the train-test split\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# Print the shapes of the resulting sets\n","print(\"Shape of X_train:\", X_train.shape)\n","print(\"Shape of X_test:\", X_test.shape)\n","print(\"Shape of y_train:\", y_train.shape)\n","print(\"Shape of y_test:\", y_test.shape)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rzTqmuTqGBLN","executionInfo":{"status":"ok","timestamp":1700591775652,"user_tz":-480,"elapsed":3579,"user":{"displayName":"Md Nizam Sapiee","userId":"06218600148546546203"}},"outputId":"ff669487-cfe8-42c8-9717-3b1e9640295e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Shape of X_train: (5770760, 19)\n","Shape of X_test: (1442691, 19)\n","Shape of y_train: (5770760,)\n","Shape of y_test: (1442691,)\n"]}]},{"cell_type":"markdown","source":["The result  provided shows the shape of the training and testing sets after performing a train-test split on  dataset. Let's break down the information:\n","\n","*   Shape of X_train: (5770760, 31)\n","This indicates that your training set (X_train) has 5,770,760 samples (rows) and 31 features (columns).\n","*   Shape of X_test: (1442691, 31)\n","This indicates that your testing set (X_test) has 1,442,691 samples (rows) and 31 features (columns).\n","*   Shape of y_train: (5770760,)\n","This indicates that your training set labels (y_train) has 5,770,760 values. It corresponds to the target variable for the training set.\n","*   Shape of y_test: (1442691,)\n","This indicates that your testing set labels (y_test) has 1,442,691 values. It corresponds to the target variable for the testing set.\n","\n","In summary, dataset has been successfully split into training and testing sets, and you now have separate sets of features (X_train and X_test) and labels (y_train and y_test) for training and evaluating machine learning models.\n","\n","\n"],"metadata":{"id":"Lu0EOJXdGeLV"}},{"cell_type":"markdown","source":["# data modelling (regression report of Decision tree)\n","\n","To generate a classification report for a Decision Tree classifier, you can use the classification_report function from scikit-learn. Here's an example code snippet\n","\n","This will print a classification report with precision, recall, F1-score, and support for each class in your target variable. Please replace X_train, y_train, X_test, and y_test with your actual data."],"metadata":{"id":"t1YZWHxiHk8l"}},{"cell_type":"code","source":["# Assuming 'features' contains your feature columns and 'ARR DELAY' is your target variable\n","# Replace 'features' and 'ARR DELAY' with the actual column names in your dataset\n","X = new_flight_df.drop('ARR DELAY', axis=1)\n","y = new_flight_df['ARR DELAY']\n","\n","# Step 1: Train-Test Split\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# Step 2: Model Training\n","regressor = DecisionTreeRegressor(random_state=42)\n","regressor.fit(X_train, y_train)\n","\n","# Step 3: Model Prediction\n","y_pred = regressor.predict(X_test)\n","\n","# Step 4: Evaluation\n","mae = mean_absolute_error(y_test, y_pred)\n","mse = mean_squared_error(y_test, y_pred)\n","r2 = r2_score(y_test, y_pred)\n","\n","# Print the regression report\n","print(f'Mean Absolute Error (MAE): {mae}')\n","print(f'Mean Squared Error (MSE): {mse}')\n","print(f'R-squared (R2): {r2}')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KuMHmVQuRc-W","executionInfo":{"status":"ok","timestamp":1700592409557,"user_tz":-480,"elapsed":146165,"user":{"displayName":"Md Nizam Sapiee","userId":"06218600148546546203"}},"outputId":"9dacb89d-a59c-4849-953c-3fc7cc3a3ee3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mean Absolute Error (MAE): 0.0002171570631139095\n","Mean Squared Error (MSE): 1.1773084554965718e-06\n","R-squared (R2): 0.9957648683975863\n"]}]},{"cell_type":"markdown","source":["provided are metrics commonly used to evaluate the performance of a regression model. Let me explain each of them:\n","\n","*   Mean Absolute Error (MAE):\n","The MAE is the average absolute differences between the observed and predicted values. In your case, a MAE of 0.000217 suggests that, on average, the model's predictions are very close to the actual values. This is a small error, indicating good performance.\n","\n","*   Mean Squared Error (MSE):\n","The MSE is the average of the squared differences between the observed and predicted values. The result is in the same unit as the squared values of the target variable. In your case, an MSE of 1.18e-06 is extremely small, suggesting that the model's predictions are very accurate and close to the actual values.\n","\n","*   R-squared (R2):\n","R-squared is a measure of how well the predicted values match the actual values. It ranges from 0 to 1, where 1 indicates perfect predictions. An R2 value of 0.996 is very high, indicating that your model explains a large proportion of the variance in the target variable. In other words, the model captures almost all the variability in the response variable.\n","\n","In summary, these metrics collectively suggest that your Decision Tree Regression model is performing exceptionally well on the test data. It is providing accurate predictions with very low errors, and the R-squared value indicates a high level of explanatory power. This is generally a positive outcome for a regression model.\n","\n","\n"],"metadata":{"id":"9fFL_BH_NmSX"}},{"cell_type":"markdown","source":["# **data modelling (classification report of Decision tree)**\n","\n","\n","'ARR DELAY' is a continuous variable, you might want to convert this problem into a classification problem by binning or categorizing the delays. For example, you can create categories like 'on-time,' 'slight delay,' 'moderate delay,' and 'significant delay' based on specific time thresholds.\n","\n","Here's an example of how you can convert 'ARR DELAY' into categories and then proceed with the classification.\n","\n","This way  transforming the regression problem into a classification problem with discrete categories, and the classifier should work without issues. Adjust the bin edges and labels based on specific needs."],"metadata":{"id":"w_dktmDAUCdJ"}},{"cell_type":"code","source":["from sklearn.tree import DecisionTreeClassifier\n","from sklearn.metrics import classification_report\n","\n","# Assuming 'new_flight_df' is your DataFrame\n","# Assuming you want to categorize delays into three categories: 'on-time,' 'slight delay,' 'significant delay'\n","new_flight_df['DELAY_CATEGORY'] = pd.cut(new_flight_df['ARR DELAY'], bins=[-np.inf, 0, 15, np.inf], labels=['on-time', 'slight delay', 'significant delay'])\n","\n","# Features and target\n","X = new_flight_df.drop(['ARR DELAY', 'DELAY_CATEGORY'], axis=1)\n","y = new_flight_df['DELAY_CATEGORY']\n","\n","# Train-test split\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# Model Training\n","classifier = DecisionTreeClassifier(random_state=42)\n","classifier.fit(X_train, y_train)\n","\n","# Model Prediction\n","y_pred = classifier.predict(X_test)\n","\n","# Evaluation\n","class_report = classification_report(y_test, y_pred)\n","print(class_report)\n","\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ehPDGQAMPW90","executionInfo":{"status":"ok","timestamp":1700593543251,"user_tz":-480,"elapsed":89309,"user":{"displayName":"Md Nizam Sapiee","userId":"06218600148546546203"}},"outputId":"bd3a93cc-a736-4d63-fdeb-943bd0204eff"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","slight delay       1.00      1.00      1.00   1442691\n","\n","    accuracy                           1.00   1442691\n","   macro avg       1.00      1.00      1.00   1442691\n","weighted avg       1.00      1.00      1.00   1442691\n","\n"]}]},{"cell_type":"markdown","source":["In a classification report, the terms precision, recall, and f1-score are metrics used to evaluate the performance of a classification model. Here's what each of these terms means:\n","\n","*   Precision:\n","Precision is the ratio of correctly predicted positive observations to the total predicted positives.\n","Formula: Precision = True Positives / (True Positives + False Positives)\n","In your case, for the 'slight delay' category, the precision is 1.00, which means that all instances predicted as 'slight delay' were indeed 'slight delay.'\n","\n","*   Recall:\n","Recall (or Sensitivity or True Positive Rate) is the ratio of correctly predicted positive observations to the all observations in actual class.\n","Formula: Recall = True Positives / (True Positives + False Negatives)\n","In your case, for the 'slight delay' category, the recall is 1.00, which means that the model correctly identified all instances of 'slight delay' out of all actual 'slight delay' instances.\n","\n","*   F1-Score:\n","F1-Score is the weighted average of Precision and Recall. It ranges from 0 to 1, where 1 is the best possible F1-Score.\n","Formula: F1-Score = 2 * (Precision * Recall) / (Precision + Recall)\n","In your case, for the 'slight delay' category, the F1-Score is 1.00, indicating a perfect balance between precision and recall.\n","\n","*   Support:\n","Support is the number of actual occurrences of the class in the specified dataset. In your case, the support for 'slight delay' is 1442691, meaning there are 1442691 instances of 'slight delay' in your dataset.\n","\n","In summary, your model is performing extremely well for the 'slight delay' category, with perfect precision, recall, and F1-Score. The overall accuracy for all categories is also 1.00, indicating that the model is making correct predictions for all instances in your dataset.\n","\n","\n","\n","\n"],"metadata":{"id":"kgAvOB7eSOl-"}},{"cell_type":"markdown","source":["**Comparison:**\n","\n","For regression, the low MAE and MSE, along with the high R2, suggest that your regression model is performing very well in predicting the target variable.\n","For classification, perfect precision, recall, and F1-Score indicate that your classification model is making accurate predictions for the specified category.\n","In summary, both models seem to be performing exceptionally well based on the provided metrics, but the nature of the tasks (regression vs. classification) makes direct comparison challenging. It's essential to consider the specific goals and requirements of each task when interpreting these metrics."],"metadata":{"id":"_hhulx6-TubG"}},{"cell_type":"markdown","source":["# fine-tuning a neural network\n","\n","For fine-tuning a neural network,  use a deep learning framework like TensorFlow or PyTorch. Below is a basic template in TensorFlow for a regression task. This is just a starting point, and you may need to adjust it based on your specific dataset and requirements.\n","\n","This is a simple example might need to customize the architecture, hyperparameters, and other settings based on specific use case. Additionally, experiment with more advanced architectures and techniques depending on the complexity of your data."],"metadata":{"id":"9pzgcNqgUmAE"}},{"cell_type":"code","source":["import tensorflow as tf\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import StandardScaler, OneHotEncoder\n","from sklearn.compose import ColumnTransformer\n","from sklearn.metrics import mean_squared_error, r2_score\n","import pandas as pd\n","\n","# Assuming 'features' contains your feature columns and 'ARR DELAY' is your target variable\n","# Replace 'features' and 'ARR DELAY' with the actual column names in your dataset\n","X = new_flight_df.drop('ARR DELAY', axis=1)\n","y = new_flight_df['ARR DELAY']\n","\n","# Identify categorical columns\n","categorical_cols = X.select_dtypes(include=['object']).columns.tolist()\n","\n","# Identify numerical columns\n","numerical_cols = X.select_dtypes(include=['number']).columns.tolist()\n","\n","# Create a preprocessor\n","preprocessor = ColumnTransformer(\n","    transformers=[\n","        ('num', StandardScaler(), numerical_cols),\n","        ('cat', OneHotEncoder(), categorical_cols)\n","    ])\n","\n","# Step 1: Train-Test Split\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# Step 2: Data Preprocessing\n","X_train_scaled = preprocessor.fit_transform(X_train)\n","X_test_scaled = preprocessor.transform(X_test)\n","\n","# Step 3: Define the Neural Network Architecture\n","model = tf.keras.Sequential([\n","    tf.keras.layers.Dense(64, activation='relu', input_shape=(X_train_scaled.shape[1],)),\n","    tf.keras.layers.Dense(32, activation='relu'),\n","    tf.keras.layers.Dense(1)  # Output layer for regression\n","])\n","\n","# Step 4: Compile the Model\n","model.compile(optimizer='adam', loss='mean_squared_error')\n","\n","# Step 5: Train the Model\n","history = model.fit(X_train_scaled, y_train, epochs=10, batch_size=32, validation_split=0.2, verbose=2)\n","\n","# Step 6: Evaluate on Test Set\n","y_pred = model.predict(X_test_scaled)\n","\n","# Step 7: Evaluate Metrics\n","mse = mean_squared_error(y_test, y_pred)\n","r2 = r2_score(y_test, y_pred)\n","\n","print(f'Mean Squared Error (MSE): {mse}')\n","print(f'R-squared (R2): {r2}')\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"J5vFYSheVn_6","executionInfo":{"status":"ok","timestamp":1700597142674,"user_tz":-480,"elapsed":2288909,"user":{"displayName":"Md Nizam Sapiee","userId":"06218600148546546203"}},"outputId":"ef02d772-3b35-46b9-f8bf-c9eb566c477d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/10\n","144269/144269 - 218s - loss: 1.3693e-04 - val_loss: 9.8135e-07 - 218s/epoch - 2ms/step\n","Epoch 2/10\n","144269/144269 - 221s - loss: 1.0849e-06 - val_loss: 2.8526e-07 - 221s/epoch - 2ms/step\n","Epoch 3/10\n","144269/144269 - 222s - loss: 6.5323e-07 - val_loss: 3.2220e-07 - 222s/epoch - 2ms/step\n","Epoch 4/10\n","144269/144269 - 219s - loss: 5.6809e-07 - val_loss: 3.5762e-07 - 219s/epoch - 2ms/step\n","Epoch 5/10\n","144269/144269 - 220s - loss: 6.0788e-07 - val_loss: 3.4098e-07 - 220s/epoch - 2ms/step\n","Epoch 6/10\n","144269/144269 - 221s - loss: 7.2570e-07 - val_loss: 8.6969e-07 - 221s/epoch - 2ms/step\n","Epoch 7/10\n","144269/144269 - 220s - loss: 5.4312e-07 - val_loss: 1.3598e-07 - 220s/epoch - 2ms/step\n","Epoch 8/10\n","144269/144269 - 219s - loss: 4.3035e-07 - val_loss: 2.2663e-06 - 219s/epoch - 2ms/step\n","Epoch 9/10\n","144269/144269 - 219s - loss: 6.4457e-07 - val_loss: 2.5125e-07 - 219s/epoch - 2ms/step\n","Epoch 10/10\n","144269/144269 - 222s - loss: 4.2482e-07 - val_loss: 6.0242e-07 - 222s/epoch - 2ms/step\n","45085/45085 [==============================] - 50s 1ms/step\n","Mean Squared Error (MSE): 6.062021936338224e-07\n","R-squared (R2): 0.9978193089026713\n"]}]},{"cell_type":"markdown","source":["The results provided are from training a neural network using TensorFlow. Let's break down the key information:\n","\n","1.   Epochs: The training process is divided into epochs, where one epoch represents one complete pass through the entire training dataset.\n","\n","2.   Time per Epoch: The time taken for each epoch is mentioned. This includes both the time spent on training (forward and backward passes) and the time spent on validation.\n","\n","*   Loss: The loss is a measure of how well the neural network is performing. It represents the difference between the predicted values and the actual values. In your case, it's decreasing, which is a positive sign. The training loss is shown for each epoch (loss), as well as the validation loss (val_loss). The goal is to minimize this value.\n","\n","*   Validation Loss: The validation loss is the loss calculated on a separate subset of the data that the model has not seen during training. It helps to monitor the model's generalization performance and detect overfitting.\n","\n","*   Steps/Second: The number of steps (or batches) processed per second during training.\n","\n","After training provided evaluation metrics on a separate test set:\n","\n","*   Mean Squared Error (MSE): This is a measure of the average squared difference between the predicted values and the actual values. Lower MSE values indicate better model performance.\n","\n","*   R-squared (R2): This is a statistical measure that represents the proportion of the variance in the dependent variable that is predictable from the independent variables. A value close to 1 indicates a good fit.\n","\n","In summary, neural network seems to be performing well on both the training and validation sets, as indicated by the decreasing loss values. The evaluation on the test set (MSE and R-squared) also suggests good predictive performance. Keep in mind that these results depend on the nature of data and the specific problem  trying to solve.\n","\n","\n","\n","\n","\n","\n","\n"],"metadata":{"id":"ovXg1qtBfjY6"}},{"cell_type":"markdown","source":["# Overall Takeaways:\n","\n","*   Both Models Perform Well: The Decision Tree model for regression and classification, as well as the fine-tuned Neural Network, exhibit excellent performance.\n","\n","*   Low Error: The regression model shows very low errors, indicating accurate predictions.\n","\n","*   Classification Accuracy: The classification model achieves perfect precision, recall, and accuracy for the specified class.\n","\n","*   Neural Network Performance: The neural network demonstrates effective learning with decreasing loss and high performance on the test set.\n","\n","In summary,  models are providing accurate and reliable predictions, but it's always important to consider the context of the specific problem you're addressing and potential implications of the model's predictions in a real-world setting.\n","\n","\n","\n"],"metadata":{"id":"C1AeRPE6gm2F"}}]}