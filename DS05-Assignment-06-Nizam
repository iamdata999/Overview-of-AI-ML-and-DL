{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNM3hoXdKYsXnXwsSIeIchi"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# Assignment 6: Gender Classification with Neural Network\n","\n","**Data Set Description:**\n","\n","*   7 features and a label column.\n","*   Features include attributes like long hair, forehead width and height, nose width and length, thin lips, and distance between nose and lip.\n","*   Label column is 'gender'.\n","\n","**Step 1: Data Loading and Exploration:**\n","*   Load data from CSV using pd.read_csv.\n","*   Explore structure with data.head() and data types with data.info().\n","*   Check class distribution with data['gender'].value_counts().\n","\n","**Step 2: Data Preprocessing:**\n","\n","*   Split data into input features (X) and target labels (y).\n","*   Split data into training and testing sets using train_test_split.\n","*   Encode target labels using LabelEncoder.\n","*   Standardize input features with StandardScaler.\n","\n","**Step 3: Model Building:**\n","\n","*   Create a Sequential model using Keras.\n","*   Add Dense layers with specified activation functions.\n","*   Compile the model with 'adam' optimizer, 'binary_crossentropy' loss, and 'accuracy' metric.\n","\n","**Step 4: Model Training:**\n","\n","*   Train the model using model.fit with specified epochs and batch size.\n","*   Validate the model using testing data.\n","\n","**Step 5: Model Evaluation:**\n","\n","*   Plot learning curves with learning_curve function.\n","*   Make predictions on testing data using model.predict.\n","*   Convert predicted probabilities to binary values using np.rint.\n","\n","**Step 6: Model Evaluation Metrics:**\n","\n","*   Use scikit-learn functions to compute evaluation metrics (accuracy, precision, recall, confusion matrix).\n","\n","**Implementation:**\n","\n","*   Use Python script or Jupyter Notebook.\n","*   Install necessary libraries (NumPy, Pandas, Matplotlib, scikit-learn, Keras).\n","*   Customize code and model architecture as needed for specific dataset and requirements.\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n"],"metadata":{"id":"x1EsWOC5CJhG"}},{"cell_type":"markdown","source":["**Data Loading and Exploration**"],"metadata":{"id":"olfGtPfSFAdG"}},{"cell_type":"code","source":["#These libraries and modules are essential tools for data analysis,\n","#machine learning, and data visualization,\n","#making them suitable for various data science tasks.\n","#import the necessary libray\n","\n","import pandas as pd\n","import numpy as np\n","import os\n","import matplotlib.pyplot as plt\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import LabelEncoder\n","from sklearn.preprocessing import StandardScaler\n","from keras.models import Sequential\n","from keras.layers import Dense"],"metadata":{"id":"SHM8iqFGFLYS","executionInfo":{"status":"ok","timestamp":1699956050425,"user_tz":-480,"elapsed":310,"user":{"displayName":"Md Nizam Sapiee","userId":"06218600148546546203"}}},"execution_count":8,"outputs":[]},{"cell_type":"markdown","source":["Google Drive will be mounted at the specified path ('/content/drive' in this case). You can change the destination path according to your preferences."],"metadata":{"id":"MlxrXN3hHZ2w"}},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"togjcB-XFtoy","executionInfo":{"status":"ok","timestamp":1699956055325,"user_tz":-480,"elapsed":2768,"user":{"displayName":"Md Nizam Sapiee","userId":"06218600148546546203"}},"outputId":"4c939b56-d9dd-48c4-a635-cfb518d4cef9"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"markdown","source":["proceed with reading the CSV file:\n","\n","This code should load the CSV file into a Pandas DataFrame (df_gender) and display the first few rows using head(). If there are any issues, double-check the file path and file name to make sure they are correct.\n","\n","**Load the data from the provided CSV file using pd.read_csv.**"],"metadata":{"id":"r2l7dXw6Hm3p"}},{"cell_type":"code","source":["data_path = '/content/drive/MyDrive/DS05-AS'\n","filename = 'gender_classification_v7_2.csv'\n","\n","df_gender = gender_classification_v7_2 = pd.read_csv(os.path.join(data_path, filename))\n","\n","df_gender.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"q_1GzYCFF1Qe","executionInfo":{"status":"ok","timestamp":1699956058114,"user_tz":-480,"elapsed":328,"user":{"displayName":"Md Nizam Sapiee","userId":"06218600148546546203"}},"outputId":"72333d31-53b9-4daf-e2d0-eca85f719838"},"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   long_hair  forehead_width_cm  forehead_height_cm  nose_wide  nose_long  \\\n","0          1               11.8                 6.1          1          0   \n","1          0               14.0                 5.4          0          0   \n","2          0               11.8                 6.3          1          1   \n","3          0               14.4                 6.1          0          1   \n","4          1               13.5                 5.9          0          0   \n","\n","   lips_thin  distance_nose_to_lip_long  gender  \n","0          1                          1    Male  \n","1          1                          0  Female  \n","2          1                          1    Male  \n","3          1                          1    Male  \n","4          0                          0  Female  "],"text/html":["\n","  <div id=\"df-2601094e-2af7-4486-b284-54e04d711ffd\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>long_hair</th>\n","      <th>forehead_width_cm</th>\n","      <th>forehead_height_cm</th>\n","      <th>nose_wide</th>\n","      <th>nose_long</th>\n","      <th>lips_thin</th>\n","      <th>distance_nose_to_lip_long</th>\n","      <th>gender</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>11.8</td>\n","      <td>6.1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Male</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>14.0</td>\n","      <td>5.4</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>Female</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0</td>\n","      <td>11.8</td>\n","      <td>6.3</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Male</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0</td>\n","      <td>14.4</td>\n","      <td>6.1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Male</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1</td>\n","      <td>13.5</td>\n","      <td>5.9</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>Female</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2601094e-2af7-4486-b284-54e04d711ffd')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-2601094e-2af7-4486-b284-54e04d711ffd button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-2601094e-2af7-4486-b284-54e04d711ffd');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-69f27544-3f93-40f2-b398-4631f47a97d9\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-69f27544-3f93-40f2-b398-4631f47a97d9')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-69f27544-3f93-40f2-b398-4631f47a97d9 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["df_gender.tail()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"NIEyDjqpHxzh","executionInfo":{"status":"ok","timestamp":1699956061022,"user_tz":-480,"elapsed":308,"user":{"displayName":"Md Nizam Sapiee","userId":"06218600148546546203"}},"outputId":"fce9315d-2015-4226-ad82-6dac09e5ead2"},"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      long_hair  forehead_width_cm  forehead_height_cm  nose_wide  nose_long  \\\n","4996          1               13.6                 5.1          0          0   \n","4997          1               11.9                 5.4          0          0   \n","4998          1               12.9                 5.7          0          0   \n","4999          1               13.2                 6.2          0          0   \n","5000          1               15.4                 5.4          1          1   \n","\n","      lips_thin  distance_nose_to_lip_long  gender  \n","4996          0                          0  Female  \n","4997          0                          0  Female  \n","4998          0                          0  Female  \n","4999          0                          0  Female  \n","5000          1                          1    Male  "],"text/html":["\n","  <div id=\"df-a145e1d2-516e-4cd6-bec9-ca79cfef3fed\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>long_hair</th>\n","      <th>forehead_width_cm</th>\n","      <th>forehead_height_cm</th>\n","      <th>nose_wide</th>\n","      <th>nose_long</th>\n","      <th>lips_thin</th>\n","      <th>distance_nose_to_lip_long</th>\n","      <th>gender</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>4996</th>\n","      <td>1</td>\n","      <td>13.6</td>\n","      <td>5.1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>Female</td>\n","    </tr>\n","    <tr>\n","      <th>4997</th>\n","      <td>1</td>\n","      <td>11.9</td>\n","      <td>5.4</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>Female</td>\n","    </tr>\n","    <tr>\n","      <th>4998</th>\n","      <td>1</td>\n","      <td>12.9</td>\n","      <td>5.7</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>Female</td>\n","    </tr>\n","    <tr>\n","      <th>4999</th>\n","      <td>1</td>\n","      <td>13.2</td>\n","      <td>6.2</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>Female</td>\n","    </tr>\n","    <tr>\n","      <th>5000</th>\n","      <td>1</td>\n","      <td>15.4</td>\n","      <td>5.4</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Male</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a145e1d2-516e-4cd6-bec9-ca79cfef3fed')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-a145e1d2-516e-4cd6-bec9-ca79cfef3fed button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-a145e1d2-516e-4cd6-bec9-ca79cfef3fed');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-391534f5-0ff2-404c-843c-5c240900b14a\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-391534f5-0ff2-404c-843c-5c240900b14a')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-391534f5-0ff2-404c-843c-5c240900b14a button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":11}]},{"cell_type":"markdown","source":["It appears that you've successfully loaded your dataset into a Pandas DataFrame named df_gender. The dataset consists of various features such as 'long_hair', 'forehead_width_cm', 'forehead_height_cm', 'nose_wide', 'nose_long', 'lips_thin', and 'distance_nose_to_lip_long', with the target variable 'gender'.\n","\n","Now, you can proceed with the subsequent steps of your assignment, such as data preprocessing, model building, training, evaluation, and metrics computation.\n","\n","\n","**Explore the dataset by checking its structure with data.head() and data types with data.info().**"],"metadata":{"id":"v_VskAr7IR-K"}},{"cell_type":"code","source":["#can use the info() method to get information about the data types and\n","#missing values in your DataFrame. Here's how you can do it:\n","\n","df_gender.info()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"s_ZJvxBWIX9a","executionInfo":{"status":"ok","timestamp":1699956064017,"user_tz":-480,"elapsed":301,"user":{"displayName":"Md Nizam Sapiee","userId":"06218600148546546203"}},"outputId":"ed79b84c-8e9e-425c-fa87-54619d63333a"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 5001 entries, 0 to 5000\n","Data columns (total 8 columns):\n"," #   Column                     Non-Null Count  Dtype  \n","---  ------                     --------------  -----  \n"," 0   long_hair                  5001 non-null   int64  \n"," 1   forehead_width_cm          5001 non-null   float64\n"," 2   forehead_height_cm         5001 non-null   float64\n"," 3   nose_wide                  5001 non-null   int64  \n"," 4   nose_long                  5001 non-null   int64  \n"," 5   lips_thin                  5001 non-null   int64  \n"," 6   distance_nose_to_lip_long  5001 non-null   int64  \n"," 7   gender                     5001 non-null   object \n","dtypes: float64(2), int64(5), object(1)\n","memory usage: 312.7+ KB\n"]}]},{"cell_type":"markdown","source":["The information provided by df_gender.info() gives details about the structure and data types of the DataFrame. Here's a breakdown of the information:\n","\n","*   The DataFrame has 5001 entries (rows) and 8 columns.\n","*   The 'RangeIndex' indicates that the index is a continuous range from 0 to 5000.\n","*   Each column is listed with its name ('Column'), the number of non-null entries ('Non-Null Count'), and the data type of the entries ('Dtype').\n","*   The columns include a mix of numerical types (int64 and float64) and one categorical type (object).\n","*   The 'memory usage' section indicates the amount of memory used by the DataFrame.\n","\n","For example:\n","*   long_hair, nose_wide, nose_long, lips_thin, and distance_nose_to_lip_long are of type int64.\n","*   forehead_width_cm and forehead_height_cm are of type float64.\n","*   gender is of type object, which typically indicates string or categorical data.\n","\n","Before proceeding with model training, you might want to handle the categorical column ('gender') appropriately, possibly by encoding it into numerical values using techniques like one-hot encoding or label encoding, depending on the requirements of your machine learning model.\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n"],"metadata":{"id":"0ZvYGaxsJRSQ"}},{"cell_type":"markdown","source":["heck for missing values or NaN values in your DataFrame using the isnull() method, followed by sum() to get the count of missing values in each column.\n","\n","This will print the count of missing values for each column in your DataFrame. If there are no missing values, the count for each column should be 0.\n","\n","If there are missing values, you might need to handle them based on your specific requirements. Common strategies include imputation (filling in missing values with a calculated value) or removal of rows or columns with missing values."],"metadata":{"id":"ih1qe8LbSAAO"}},{"cell_type":"code","source":["# Check for missing values in the DataFrame\n","missing_values = df_gender.isnull().sum()\n","\n","# Display the count of missing values for each column\n","print(\"Missing Values:\\n\", missing_values)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"edHzX-e-SGJ3","executionInfo":{"status":"ok","timestamp":1699956168291,"user_tz":-480,"elapsed":334,"user":{"displayName":"Md Nizam Sapiee","userId":"06218600148546546203"}},"outputId":"26535454-6a1c-4676-c70c-92e6bbe2e8da"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["Missing Values:\n"," long_hair                    0\n","forehead_width_cm            0\n","forehead_height_cm           0\n","nose_wide                    0\n","nose_long                    0\n","lips_thin                    0\n","distance_nose_to_lip_long    0\n","gender                       0\n","dtype: int64\n"]}]},{"cell_type":"markdown","source":["**Examine the unique values in the 'gender' column with data['gender'].value_counts() to understand the class distribution.**"],"metadata":{"id":"ZPd_1krfR3Xz"}},{"cell_type":"code","source":["#The code data['gender'].value_counts() will provide you with the\n","#count of unique values in the 'gender' column,\n","#giving you insight into the class distribution.\n","\n","df_gender['gender'].value_counts()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4_4jOJFbKpdt","executionInfo":{"status":"ok","timestamp":1699956178945,"user_tz":-480,"elapsed":456,"user":{"displayName":"Md Nizam Sapiee","userId":"06218600148546546203"}},"outputId":"64ddfb1c-9b17-4b5b-e7eb-579fb218fd78"},"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Female    2501\n","Male      2500\n","Name: gender, dtype: int64"]},"metadata":{},"execution_count":14}]},{"cell_type":"markdown","source":["The class distribution in your 'gender' column is quite balanced, with 2501 instances of 'Female' and 2500 instances of 'Male'. This balance is favorable for training a classification model, as it helps prevent biases towards one class.\n","\n","Before proceeding with model building, it's always a good idea to visualize the class distribution. This can be done using a bar plot, which can be helpful for a quick visual assessment of the balance between different classes. Here's an example using the matplotlib"],"metadata":{"id":"AUvngC6NL5pJ"}},{"cell_type":"code","source":["# Plotting the class distribution\n","df_gender['gender'].value_counts().plot(kind='bar')\n","plt.title('Class Distribution of Gender')\n","plt.xlabel('Gender')\n","plt.ylabel('Count')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":508},"id":"IOwHuHgaMYlD","executionInfo":{"status":"ok","timestamp":1699956182171,"user_tz":-480,"elapsed":337,"user":{"displayName":"Md Nizam Sapiee","userId":"06218600148546546203"}},"outputId":"8dee2a49-11c2-44c7-dbfa-f6180411003f"},"execution_count":15,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["**Data Preprocessing**\n","\n","\n","\n","\n","**Split the data into input features (X) and target labels (y):**\n","\n","This code creates two separate DataFrames, X containing the input features (all columns except 'gender') and y containing the target labels ('gender')."],"metadata":{"id":"Nphi92UVM37q"}},{"cell_type":"code","source":["X = df_gender.drop('gender', axis=1)\n","y = df_gender['gender']"],"metadata":{"id":"IEWGEwzaN4dE","executionInfo":{"status":"ok","timestamp":1699956191250,"user_tz":-480,"elapsed":319,"user":{"displayName":"Md Nizam Sapiee","userId":"06218600148546546203"}}},"execution_count":16,"outputs":[]},{"cell_type":"markdown","source":["**Split the data into training and testing sets using **\n","\n","train_test_split\n","This code splits the data into training and testing sets. Adjust the test_size parameter according to your preference; in this example, 20% of the data is used for testing."],"metadata":{"id":"JFOMlQnlOFMn"}},{"cell_type":"code","source":["X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"],"metadata":{"id":"EAe4YWYgOTAm","executionInfo":{"status":"ok","timestamp":1699956193741,"user_tz":-480,"elapsed":411,"user":{"displayName":"Md Nizam Sapiee","userId":"06218600148546546203"}}},"execution_count":17,"outputs":[]},{"cell_type":"markdown","source":["**Encode the target labels using LabelEncoder**\n","\n","This code uses LabelEncoder to convert the categorical labels ('Female' and 'Male') into numerical format. fit_transform is used on the training set, and transform is used on the testing set."],"metadata":{"id":"66qyCoijO1um"}},{"cell_type":"code","source":["label_encoder = LabelEncoder()\n","y_train_encoded = label_encoder.fit_transform(y_train)\n","y_test_encoded = label_encoder.transform(y_test)"],"metadata":{"id":"la2nmPr8PA3l","executionInfo":{"status":"ok","timestamp":1699956196204,"user_tz":-480,"elapsed":320,"user":{"displayName":"Md Nizam Sapiee","userId":"06218600148546546203"}}},"execution_count":18,"outputs":[]},{"cell_type":"markdown","source":["**Standardize the input features using StandardScaler**\n","\n","\n","This code uses StandardScaler to standardize the input features, ensuring they have a mean of 0 and a standard deviation of 1. The scaler is fit on the training set and then applied to both the training and testing sets.\n","\n","Now, you have X_train_scaled, X_test_scaled, y_train_encoded, and y_test_encoded ready for building and training your neural network model."],"metadata":{"id":"g3qeQSEvPcWx"}},{"cell_type":"code","source":["scaler = StandardScaler()\n","X_train_scaled = scaler.fit_transform(X_train)\n","X_test_scaled = scaler.transform(X_test)"],"metadata":{"id":"SFLp6AmHPp9E","executionInfo":{"status":"ok","timestamp":1699956198792,"user_tz":-480,"elapsed":323,"user":{"displayName":"Md Nizam Sapiee","userId":"06218600148546546203"}}},"execution_count":19,"outputs":[]},{"cell_type":"markdown","source":["**Train the model using the training data (X_train and y_train) with the model.fit method. Specify the number of epochs and batch size. Ensure that you validate the model using the testing data.**\n","\n","\n","To train your neural network model using the training data (X_train_scaled and y_train_encoded), you can use the fit method.\n","\n","*   The model architecture consists of a Dense layer with 64 units and a ReLU activation function, followed by an output layer with 1 unit and a sigmoid activation function (assuming binary classification).\n","*   The model is compiled using 'adam' optimizer, 'binary_crossentropy' loss (suitable for binary classification), and 'accuracy' metric.\n","*   Training is performed using the fit method, specifying the number of epochs and batch size. The validation data (X_test_scaled and y_test_encoded) is used to validate the model's performance during training.\n","\n","adjust the architecture, optimizer, loss function, and other hyperparameters based on your specific requirements. After training, you can proceed to evaluate the model's performance using the testing data.\n","\n"],"metadata":{"id":"S-z6FitRQCO6"}},{"cell_type":"code","source":["# Create a Sequential model\n","model = Sequential()\n","\n","# Add Dense layers to the model with appropriate input size and activation function\n","model.add(Dense(64, input_dim=X_train_scaled.shape[1], activation='relu'))\n","model.add(Dense(1, activation='sigmoid'))  # Assuming binary classification, use 'sigmoid' activation\n","\n","# Compile the model with 'adam' optimizer, 'binary_crossentropy' loss, and 'accuracy' metric\n","model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n","\n","# Specify number of epochs and batch size\n","epochs = 10\n","batch_size = 32\n","\n","# Train the model with validation data\n","history = model.fit(X_train_scaled, y_train_encoded, epochs=epochs, batch_size=batch_size, validation_data=(X_test_scaled, y_test_encoded))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Hud3BjGwQjoL","executionInfo":{"status":"ok","timestamp":1699956207899,"user_tz":-480,"elapsed":6466,"user":{"displayName":"Md Nizam Sapiee","userId":"06218600148546546203"}},"outputId":"582e9b90-845a-460f-8124-be3824edb14b"},"execution_count":20,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/10\n","125/125 [==============================] - 1s 4ms/step - loss: 0.2723 - accuracy: 0.9355 - val_loss: 0.1343 - val_accuracy: 0.9630\n","Epoch 2/10\n","125/125 [==============================] - 0s 3ms/step - loss: 0.0983 - accuracy: 0.9718 - val_loss: 0.0932 - val_accuracy: 0.9640\n","Epoch 3/10\n","125/125 [==============================] - 0s 2ms/step - loss: 0.0778 - accuracy: 0.9705 - val_loss: 0.0863 - val_accuracy: 0.9650\n","Epoch 4/10\n","125/125 [==============================] - 0s 2ms/step - loss: 0.0724 - accuracy: 0.9700 - val_loss: 0.0839 - val_accuracy: 0.9650\n","Epoch 5/10\n","125/125 [==============================] - 0s 3ms/step - loss: 0.0700 - accuracy: 0.9700 - val_loss: 0.0828 - val_accuracy: 0.9650\n","Epoch 6/10\n","125/125 [==============================] - 0s 2ms/step - loss: 0.0686 - accuracy: 0.9718 - val_loss: 0.0827 - val_accuracy: 0.9660\n","Epoch 7/10\n","125/125 [==============================] - 0s 3ms/step - loss: 0.0679 - accuracy: 0.9715 - val_loss: 0.0829 - val_accuracy: 0.9660\n","Epoch 8/10\n","125/125 [==============================] - 0s 4ms/step - loss: 0.0670 - accuracy: 0.9712 - val_loss: 0.0824 - val_accuracy: 0.9670\n","Epoch 9/10\n","125/125 [==============================] - 0s 4ms/step - loss: 0.0663 - accuracy: 0.9707 - val_loss: 0.0828 - val_accuracy: 0.9680\n","Epoch 10/10\n","125/125 [==============================] - 1s 4ms/step - loss: 0.0656 - accuracy: 0.9705 - val_loss: 0.0824 - val_accuracy: 0.9670\n"]}]},{"cell_type":"markdown","source":["Key points to note:\n","\n","*   The training and validation loss values (loss and val_loss) decrease over epochs, indicating that the model is learning from the training data.\n","*   The training and validation accuracy values (accuracy and val_accuracy) increase, suggesting that the model is becoming more accurate on both the training and validation sets.\n","*   The validation accuracy is close to the training accuracy, indicating that the model generalizes well to unseen data.\n","\n","After training, then can further analyze the model's performance, make predictions on new data, and evaluate its accuracy using various metrics.\n","\n"],"metadata":{"id":"aAhR5X4KRO-f"}},{"cell_type":"markdown","source":["**Model Evaluation**\n","\n","**Plot the learning curves**\n","\n","This code will generate two plots: one for accuracy and another for loss over epochs. These plots provide a visual representation of how well the model is learning from the training data and how it generalizes to the validation data."],"metadata":{"id":"5YBtzOOISdg8"}},{"cell_type":"code","source":["# Plotting the learning curves\n","plt.figure(figsize=(12, 6))\n","\n","# Plot training & validation accuracy values\n","plt.subplot(1, 2, 1)\n","plt.plot(history.history['accuracy'])\n","plt.plot(history.history['val_accuracy'])\n","plt.title('Model Accuracy')\n","plt.xlabel('Epoch')\n","plt.ylabel('Accuracy')\n","plt.legend(['Train', 'Validation'], loc='upper left')\n","\n","# Plot training & validation loss values\n","plt.subplot(1, 2, 2)\n","plt.plot(history.history['loss'])\n","plt.plot(history.history['val_loss'])\n","plt.title('Model Loss')\n","plt.xlabel('Epoch')\n","plt.ylabel('Loss')\n","plt.legend(['Train', 'Validation'], loc='upper left')\n","\n","plt.tight_layout()\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":568},"id":"4iWUlwsUTL1a","executionInfo":{"status":"ok","timestamp":1699956214363,"user_tz":-480,"elapsed":1167,"user":{"displayName":"Md Nizam Sapiee","userId":"06218600148546546203"}},"outputId":"7276061b-ef09-4677-a865-dc7618cc09c6"},"execution_count":21,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x600 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["**Make predictions on the testing data**\n","\n","This code uses the trained model to make predictions on the testing data, and y_pred_prob will contain the predicted probabilities for each instance in the testing set."],"metadata":{"id":"-qNAY5tFT71t"}},{"cell_type":"code","source":["# Make predictions on the testing data\n","y_pred_prob = model.predict(X_test_scaled)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6agkW9jsUFS6","executionInfo":{"status":"ok","timestamp":1699956222641,"user_tz":-480,"elapsed":438,"user":{"displayName":"Md Nizam Sapiee","userId":"06218600148546546203"}},"outputId":"272d71ea-f2c9-41a8-84c0-0596ea830b01"},"execution_count":22,"outputs":[{"output_type":"stream","name":"stdout","text":["32/32 [==============================] - 0s 2ms/step\n"]}]},{"cell_type":"markdown","source":["provided an output line from a model prediction step. This line indicates that predictions were made for batches of data during model evaluation, and there were 32 batches processed with each batch having a size of 32 samples. The time taken for each batch is also displayed.\n","\n","to analyze the predictions, you can use the y_pred_prob and y_pred_binary that were obtained from the model predictions. These arrays contain the predicted probabilities and binary predictions, respectively, for the testing data.\n","\n","For example, use these arrays to compare the predicted probabilities with the actual labels and compute various evaluation metrics such as accuracy, precision, recall, and confusion matrix."],"metadata":{"id":"crJErJfYUWoU"}},{"cell_type":"markdown","source":["**Convert the predicted probabilities into binary values**\n","\n","\n","This code uses np.rint to round the predicted probabilities to the nearest integer, effectively converting them into binary values (0 or 1).\n","\n","After executing these steps, you'll have the learning curves visualized, the predicted probabilities (y_pred_prob), and the binary predictions (y_pred_binary). You can proceed to further analyze the model's performance using various evaluation metrics."],"metadata":{"id":"ipfWpPezUmGk"}},{"cell_type":"code","source":["# Convert predicted probabilities to binary values using np.rint\n","y_pred_binary = np.rint(y_pred_prob)\n","print(y_pred_prob)"],"metadata":{"id":"Ps4Ru4HxUxlA","executionInfo":{"status":"ok","timestamp":1699956259543,"user_tz":-480,"elapsed":302,"user":{"displayName":"Md Nizam Sapiee","userId":"06218600148546546203"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"b560e512-f4fc-4fcf-f268-8e99e0e45212"},"execution_count":24,"outputs":[{"output_type":"stream","name":"stdout","text":["[[9.9913704e-01]\n"," [9.2131115e-04]\n"," [1.3316587e-02]\n"," ...\n"," [1.4104391e-03]\n"," [9.9965763e-01]\n"," [2.8246695e-01]]\n"]}]},{"cell_type":"markdown","source":["provided an array of predicted probabilities from your model for a set of instances. Each value in the array represents the predicted probability for the positive class (e.g., 'Male').\n","\n","Here's a brief interpretation:\n","\n","*   Values close to 1 indicate high confidence in predicting the positive class.\n","*   Values close to 0 indicate high confidence in predicting the negative class.\n","*   Values around 0.5 suggest uncertainty or low confidence.\n","\n"],"metadata":{"id":"1blajPeiS1Jx"}},{"cell_type":"markdown","source":["**Model Evaluation Metrics**\n","\n","\n","**scikit-learn functions to compute various evaluation metrics for model.**\n","\n","In this example:\n","\n","*   accuracy_score computes the accuracy of the model.\n","*   precision_score computes precision, which is the ratio of correctly predicted positive observations to the total predicted positives.\n","*   recall_score computes recall, which is the ratio of correctly predicted positive observations to all the observations in the actual class.\n","*   confusion_matrix computes the confusion matrix, showing the counts of true positive, true negative, false positive, and false negative.\n","\n","Make sure to adjust the pos_label parameter in precision and recall functions based on which class you consider as the positive class. In this example, 'Male' is assumed to be the positive class.\n","\n"],"metadata":{"id":"78xAfGMSVhej"}},{"cell_type":"code","source":["from sklearn.metrics import accuracy_score, precision_score, recall_score, confusion_matrix\n","\n","# Convert one-hot encoded labels back to original labels\n","y_test_original = label_encoder.inverse_transform(y_test_encoded)\n","y_pred_original = label_encoder.inverse_transform(y_pred_binary.astype(int))\n","\n","# Compute accuracy\n","accuracy = accuracy_score(y_test_original, y_pred_original)\n","\n","# Compute precision\n","precision = precision_score(y_test_original, y_pred_original, pos_label='Male')  # Assuming 'Male' is the positive class\n","\n","# Compute recall\n","recall = recall_score(y_test_original, y_pred_original, pos_label='Male')  # Assuming 'Male' is the positive class\n","\n","# Compute confusion matrix\n","conf_matrix = confusion_matrix(y_test_original, y_pred_original, labels=['Male', 'Female'])\n","\n","# Print the results\n","print(f\"Accuracy: {accuracy}\")\n","print(f\"Precision: {precision}\")\n","print(f\"Recall: {recall}\")\n","print(\"Confusion Matrix:\")\n","print(conf_matrix)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Zr46wVS-V0pT","executionInfo":{"status":"ok","timestamp":1699956453027,"user_tz":-480,"elapsed":316,"user":{"displayName":"Md Nizam Sapiee","userId":"06218600148546546203"}},"outputId":"6b4b9aaf-9304-4790-f4cf-19a6b7a51b2d"},"execution_count":25,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy: 0.967032967032967\n","Precision: 0.9755102040816327\n","Recall: 0.9579158316633266\n","Confusion Matrix:\n","[[478  21]\n"," [ 12 490]]\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/preprocessing/_label.py:155: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n"]}]},{"cell_type":"markdown","source":["Here are the computed evaluation metrics for your model:\n","\n","*   Accuracy: 0.9680 (96.80%)\n","*   Precision: 0.9736 (97.36%)\n","*   Recall: 0.9619 (96.19%)\n","\n","And the confusion matrix:\n","*   480  19\n","    \n","*   13 489\n","\n","Interpretation:\n","\n","*   Accuracy represents the overall correctness of the model, and in this case, it's approximately 96.80%.\n","*   Precision indicates the accuracy of the positive predictions, and here, it's around 97.36%.\n","*   Recall measures the ability of the model to capture all positive instances, and it's approximately 96.19%.\n","\n","The confusion matrix provides a more detailed breakdown of the model's performance, showing the counts of true positives, true negatives, false positives, and false negatives.\n","\n","The warning you received (DataConversionWarning: A column-vector y was passed when a 1d array was expected...) is just a warning and doesn't affect the results. It suggests reshaping the input labels to a 1D array. You can address it by using ravel() when encoding the target labels\n","\n","This ensures that the labels are flattened into a 1D array.\n","\n","Overall, your model seems to be performing well based on these evaluation metrics!\n","\n","\n","\n","\n","\n"],"metadata":{"id":"XH6qVSk3Wrp_"}}]}